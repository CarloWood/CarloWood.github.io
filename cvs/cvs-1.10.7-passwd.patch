diff -ru cvs-1.10.7.old/doc/cvs.texinfo cvs-1.10.7/doc/cvs.texinfo
--- cvs-1.10.7.old/doc/cvs.texinfo	Fri Jul 16 18:49:32 1999
+++ cvs-1.10.7/doc/cvs.texinfo	Thu Aug 26 16:45:22 1999
@@ -2314,15 +2314,25 @@
 security}, for details), a separate @sc{cvs} password
 file may be used, so people don't compromise their
 regular passwords when they access the repository.
-This file is @file{$CVSROOT/CVSROOT/passwd}
+This file is @file{/etc/cvs.passwd}
 (@pxref{Intro administrative files}).  Its format is
 similar to @file{/etc/passwd}, except that it only has
 two or three fields, username, password, and optional
-username for the server to use.  For example:
+username for the server to use.  For each allowed
+root a seperate list of user/passwords must be provided,
+prepended with the root path.  For example:
 
 @example
+# The main CVS repository:
+/usr/src/cvsroot
 bach:ULtgRLXo7NRxs
 cwang:1sOp854gDF3DY
+
+# We use a different repository for `project':
+/usr/local/project/cvs
+anoncvs:s2HgRE.D/a7Xs:rob
+robby:zVCvOmrpDiPBE:rob
+
 @end example
 
 The password is encrypted according to the standard
@@ -2331,19 +2341,19 @@
 @file{passwd} files.
 
 When authenticating a password, the server first checks
-for the user in the @sc{cvs} @file{passwd} file.  If it
+for the user in the @sc{cvs} @file{cvs.passwd} file.  If it
 finds the user, it compares against that password.  If
 it does not find the user, or if the @sc{cvs}
-@file{passwd} file does not exist, then the server
+@file{cvs.passwd} file does not exist, then the server
 tries to match the password using the system's
 user-lookup routine (using the system's user-lookup
 routine can be disabled by setting @code{SystemAuth=no}
 in the config file, @pxref{config}).  When using the @sc{cvs}
-@file{passwd} file, the server runs as the
+@file{cvs.passwd} file, the server runs as the
 username specified in the third argument in the
 entry, or as the first argument if there is no third
 argument (in this way @sc{cvs} allows imaginary
-usernames provided the @sc{cvs} @file{passwd} file
+usernames provided the @sc{cvs} @file{cvs.passwd} file
 indicates corresponding valid system usernames).  In
 any case, @sc{cvs} will have no privileges which the
 (valid) user would not have.
@@ -2386,7 +2396,7 @@
 general system access as well.
 
 Right now, the only way to put a password in the
-@sc{cvs} @file{passwd} file is to paste it there from
+@sc{cvs} @file{cvs.passwd} file is to paste it there from
 somewhere else.  Someday, there may be a @code{cvs
 passwd} command.
 Unlike many of the files in @file{$CVSROOT/CVSROOT},
@@ -2502,33 +2512,18 @@
 @c *very* easy to accidentally screw up a setup of this
 @c type).
 
-Note that because the @file{$CVSROOT/CVSROOT} directory
-contains @file{passwd} and other files which are used
-to check security, you must control the permissions on
-this directory as tightly as the permissions on
-@file{/etc}.  The same applies to the @file{$CVSROOT}
-directory itself and any directory
-above it in the tree.  Anyone who has write access to
-such a directory will have the ability to become any
-user on the system.  Note that these permissions are
-typically tighter than you would use if you are not
-using pserver.
-@c TODO: Would be really nice to document/implement a
-@c scheme where the CVS server can run as some non-root
-@c user, e.g. "cvs".  CVSROOT/passwd would contain a
-@c bunch of entries of the form foo:xxx:cvs (or the "cvs"
-@c would be implicit).  This would greatly reduce
-@c security risks such as those hinted at in the
-@c previous paragraph.  I think minor changes to CVS
-@c might be required but mostly this would just need
-@c someone who wants to play with it, document it, &c.
-
-In summary, anyone who gets the password gets
-repository access (which may imply some measure of general system
-access as well).  The password is available to anyone
-who can sniff network packets or read a protected
-(i.e., user read-only) file.  If you want real
-security, get Kerberos.
+Note that because the @file{/etc/cvs.passwd} file contains
+DES encrypted passwords, you must make it only readable
+root.
+
+Anyone who gets the password gets repository access, and
+some measure of general system access as well.
+The password is available to anyone who can sniff network
+packets or read a protected (i.e., user read-only) file.
+It is therefore desirable to always use different passwords
+for users in /etc/cvs.passwd and disable write access to
+anyone else.
+If you want real security, get Kerberos.
 
 @node GSSAPI authenticated
 @subsection Direct connection with GSSAPI
@@ -2731,11 +2726,11 @@
 those users listed in it have write access, and
 everyone else has read-only access (of course, even the
 read-only users still need to be listed in the
-@sc{cvs} @file{passwd} file).  The
+@sc{cvs} @file{cvs.passwd} file).  The
 @file{writers} file has the same format as the
 @file{readers} file.
 
-        Note: if your @sc{cvs} @file{passwd}
+        Note: if your @sc{cvs} @file{cvs.passwd}
 file maps cvs users onto system users (@pxref{Password
 authentication server}), make sure you deny or grant
 read-only access using the @emph{cvs} usernames, not
diff -ru cvs-1.10.7.old/src/cvs.h cvs-1.10.7/src/cvs.h
--- cvs-1.10.7.old/src/cvs.h	Thu May 27 13:55:16 1999
+++ cvs-1.10.7/src/cvs.h	Thu Aug 26 16:42:52 1999
@@ -192,6 +192,11 @@
 
 /* Other CVS file names */
 
+/* The use of CVSROOTADM_PASSWD is a security risk.  Instead the passwd
+   file should be put in /etc.  This file has a slightly different format:
+   It allows to list multiple repositories and their password lists. */
+#define CVS_PASSWD		"/etc/cvs.passwd"
+
 /* Files go in the attic if the head main branch revision is dead,
    otherwise they go in the regular repository directories.  The whole
    concept of having an attic is sort of a relic from before death
diff -ru cvs-1.10.7.old/src/root.c cvs-1.10.7/src/root.c
--- cvs-1.10.7.old/src/root.c	Sun Mar  7 21:17:02 1999
+++ cvs-1.10.7/src/root.c	Thu Aug 26 16:42:52 1999
@@ -234,29 +234,118 @@
 {
     if (root_allow_vector != NULL)
 	free (root_allow_vector);
+    root_allow_vector = NULL;
     root_allow_count = 0;
     root_allow_size = 0;
 }
 
+static int
+parse_cvs_passwd_roots ()
+{
+    FILE *fp_passwd;
+    char *line;
+    size_t line_allocated;
+    int line_number, blank_line;
+
+    fp_passwd = CVS_FOPEN (CVS_PASSWD, "r");
+
+    /* For backwards compatibility we check if /etc/cvs.passwd exists,
+     * and if not, we continue as before. */
+    if (fp_passwd == NULL)
+        return 0;
+
+    /* It is not possible to give a warning here because that confuses
+     * the clients:
+     * jolan% cvs commit CVSROOT
+     * cvs [commit aborted]: unrecognized auth response from jolan: cvs pserver: warning: --allow-root is depricated/ignored
+     * jolan%
+     */
+#if 0
+    /* If /etc/cvs.passwd exists, then we check if --allow-root was
+     * used and give a warning when it was. */
+    if (root_allow_size > 0)
+        error (0, 0, "warning: --allow-root is depricated/ignored");
+#endif
+
+    /* Next allow_root_vector is emptied in order to ignore these possible
+     * --allow-root commandline arguments. */
+    root_allow_free ();
+
+    if (trace)
+        (void) fprintf (stderr, " -> parse_cvs_passwd()\n");
+
+    /* Finally, /etc/cvs.passwd is parsed, looking for allowed roots. */
+    line = NULL;
+    line_allocated = 0;
+    line_number = 0;
+    blank_line = 1;
+    while (getline (&line, &line_allocated, fp_passwd) >= 0)
+    {
+        line_number++;
+
+        /* skip lines starting with # */
+        if (line[0] == '#')
+            continue;
+
+	/* If the preceding line was blank and this one starts with a '/',
+	 * then interpret it as a root path */
+	if (blank_line && line[0] == '/')
+	{
+	    char *cp;
+	    /* find end of repository path */
+	    for (cp = line; *cp && !isspace (*cp) && isprint (*cp); cp++)
+		;
+	    /* Allow path to be terminated by a space */
+	    if (*cp == '\0' || isspace (*cp))
+	    {
+		*cp = '\0';
+		root_allow_add (line);
+	    }
+	    blank_line = 0;
+	}
+	else
+	{
+	    char *cp;
+	    /* skip whitespace at beginning of line */
+	    for (cp = line; *cp && isspace (*cp); cp++)
+		;
+            /* if *cp is null, the whole line was blank */
+            blank_line = (*cp == '\0');
+            if (blank_line)
+        	continue;
+	}
+    }
+    return 1;
+}
+
 int
 root_allow_ok (arg)
     char *arg;
 {
+    static int cvs_passwd_parsed = 0, cvs_passwd_exists = 0;
     unsigned int i;
 
+    if (!cvs_passwd_parsed)
+    {
+	cvs_passwd_exists = parse_cvs_passwd_roots();
+	cvs_passwd_parsed = 1;
+    }
+
     if (root_allow_count == 0)
     {
-	/* Probably someone upgraded from CVS before 1.9.10 to 1.9.10
-	   or later without reading the documentation about
-	   --allow-root.  Printing an error here doesn't disclose any
+	/* Possibly someone upgraded from CVS before 1.9.10 to 1.9.10
+	   or later without reading the documentation about --allow-root
+	   or /etc/cvs.passwd.  Printing an error here doesn't disclose any
 	   particularly useful information to an attacker because a
 	   CVS server configured in this way won't let *anyone* in.  */
 
 	/* Note that we are called from a context where we can spit
 	   back "error" rather than waiting for the next request which
 	   expects responses.  */
-	printf ("\
-error 0 Server configuration missing --allow-root in inetd.conf\n");
+	printf ("error 0 Server configuration missing %s\n",
+            cvs_passwd_exists
+	    ? "repositories in cvs.passwd"
+	    : "--allow-root in inetd.conf");
 	error_exit ();
     }
 
diff -ru cvs-1.10.7.old/src/server.c cvs-1.10.7/src/server.c
--- cvs-1.10.7.old/src/server.c	Thu May 27 20:50:48 1999
+++ cvs-1.10.7/src/server.c	Thu Aug 26 16:42:52 1999
@@ -5168,7 +5168,7 @@
 
 
 /* 
- * 0 means no entry found for this user.
+ * 0 means no entry found for this user/repository.
  * 1 means entry found and password matches.
  * 2 means entry found, but password does not match.
  *
@@ -5190,6 +5190,20 @@
     int found_it = 0;
     int namelen;
 
+    /* First we try /etc/cvs.passwd because if it exists, we should
+     * ignore CVSROOT/passwd. */
+
+    filename = xmalloc (strlen (CVS_PASSWD) + 1);
+    strcpy(filename, CVS_PASSWD);
+
+    fp = CVS_FOPEN (filename, "r");
+    if (fp == NULL)
+    {
+
+        /* Now try if the user is still using the depricated
+         * CVSROOTADM_PASSWD method of authenticating. */
+/* NOT INDENTED YET: */
+
     /* We don't use CVSroot_directory because it hasn't been set yet
      * -- our `repository' argument came from the authentication
      * protocol, not the regular CVS protocol.
@@ -5208,15 +5222,56 @@
     fp = CVS_FOPEN (filename, "r");
     if (fp == NULL)
     {
+        /* Complain about CVS_PASSWD only: CVSROOTADM_PASSWD is depricated. */
 	if (!existence_error (errno))
-	    error (0, errno, "cannot open %s", filename);
+	    error (0, errno, "cannot open %s", CVS_PASSWD);
 	return 0;
     }
+    }  /* END OF MISSING INDENTATION */
+    else
+    {
+        /* Now skip to the correct cvs root path, if any. */
+
+        int found = 0;
+        while (getline (&linebuf, &linebuf_len, fp) >= 0)
+	{
+	    /* Skip comments */
+	    if (linebuf[0] == '#')
+	        continue;
+
+            if (linebuf[0] == '/')
+	    {
+	        char *cp;
+
+		/* Repository path can end on a space in the file */
+		for (cp = linebuf; *cp && !isspace(*cp); cp++)
+		    ;
+		*cp = '\0';
+
+	        if (strcmp(repository, linebuf) == 0)
+		{
+		    found = 1;
+		    break;
+	        }
+	    }
+	}
+	if (!found)
+	    goto repository_not_found;		/* Don't try to read more */
+    }
 
     /* Look for a relevant line -- one with this user's name. */
     namelen = strlen (username);
     while (getline (&linebuf, &linebuf_len, fp) >= 0)
     {
+        /* Skip comments */
+	if (linebuf[0] == '#')
+	    continue;
+
+        /* If the line starts with a '/', then we bumped
+	 * into the next root path. */
+	if (linebuf[0] == '/')
+	    break;
+
 	if ((strncmp (linebuf, username, namelen) == 0)
 	    && (linebuf[namelen] == ':'))
         {
@@ -5224,6 +5279,7 @@
 	    break;
         }
     }
+repository_not_found:
     if (ferror (fp))
 	error (0, errno, "cannot read %s", filename);
     if (fclose (fp) < 0)
@@ -5360,7 +5416,10 @@
 	   letting you in if it won't say why, and I am not convinced
 	   that the potential information disclosure to an attacker
 	   outweighs this.  */
-	printf ("error 0 no such user %s in CVSROOT/passwd\n", username);
+	/* If the deprecated CVSROOT/passwd is being used, we still print
+	   this error about CVS_PASSWD; we don't want the user to think
+	   it is ok to continue to use CVSROOT/passwd. */
+	printf ("error 0 no such user %s in %s\n", username, CVS_PASSWD);
 
 	/* I'm doing this manually rather than via error_exit ()
 	   because I'm not sure whether we want to call server_cleanup.
