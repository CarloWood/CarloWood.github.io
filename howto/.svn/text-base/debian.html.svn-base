<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html LANG="en_US">
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta name="author" content="Carlo Wood">
<meta name="keywords" content="debian, dpkg, cheat sheet, HOWTO">
<title>HOWTO debian, cheat sheet</title>
<link href="../css/common.css" rel="stylesheet" type="text/css">
<link href="howto.css" rel="stylesheet" type="text/css">
</head>

<body>

<div id="content">

<h1>Debian Cheat Sheet</h1>

<div id="date">Carlo Wood, March 2007</div>

<h2>Table of contents</h2>

<ul>
<li><a href="#finding">Finding things</a>
<li><a href="#queries">Queries</a>
<li><a href="#customizing">Customizing packages</a>
<li><a href="#errata">Pinning errata</a>
</ul>

<a name="finding">
<h2>Finding things</h2>

<p>If you want to find something, there are several
classes of objects that you can start with.
Click on the link describing what you already have.</p>

<ul>
<li><a href="#packages">Packages</a>
<p>These are the debian packages. They have a <em>name</em>.
<li><a href="#package files">Package files</a>
<p>These are the <code>.deb</code> files that contain a package.
The first part of the file name is usually the package <em>name</em>.
<li><a href="#sources">Sources</a>
<p>A source tree containing a debian directory.</p>
<li><a href="#installed">Installed Files</a>
<p>Any file that was installed and is part of a debian package.</p>
<li><a href="#apt-file">Other files</a>
<p>Files that are not yet installed.</p>
<li><a href="#apt-cache">Some keyword</a>
<p>If you look for a packages related to some keyword.</p>
</ul>

<a name="packages">
<h3>Packages</h3>

<p>When looking for information, you normally first want to find
the <b>package name</b>.
Here is how to <b>list all packages</b> that are installed:

<pre>
dpkg -l
</pre>

The package <em>names</em> are listed in the second column.
The third column is the version, the fourth and last column
a short description. The meaning of the first column is printed
in the first three lines of the output.

If the package name is already known, one can get this information
for a single package by running:

<pre>
dpkg -l <i>name</i>
</pre>
</ol>

<a name="package files">
<h3>Package files</h3>

<p>These are the .deb files that contain a package.
The first part of the file name up till the first underscore
is usually the package name.</p>

<p>Information about a package file can be obtained with the command:</p>

<pre>
dpkg --info <i>package.deb</i>
</pre>

<p>This should extract the <em>name</em> of this package:</p>

<pre>
dpkg --info <i>package.deb</i> | grep '^Source: ' | sed -e 's/Source: //'
</pre>

<a name="sources">
<h3>Sources</h3>

<p>Sources are normally not installed. You can only install
them if you know the package name. When installing the sources
of a debian package, a package ending on <code>.dsc</code>
(description) is downloaded along with an original tar ball
and a debian specific diff (compressed). The <code>.dsc</code>
will contain the name of the package, both, in its filename
as well as content (after the <code>Source:</code> keyword).</p>

<a name="installed">
<h3>Installed files</h3>

<p>If you have a file <code>/path/filename</code> installed, and you
want to know what package it belongs to (if any), then issue the
following command:</p>

<pre>
dpkg -S /path/filename
</pre>

<p>This will print <code>name: /path/filename</code>.</p>

<p>Actually it's <code>dpkg -S <i>filename-search-pattern</i></code>,
where <i>filename-search-pattern</i> can contain the usual shell wildchars.
The command can therefore also used to search in a fuzzy way for packages
that have files installed matching the given pattern. It does however not
find/return extra files created by maintainer scripts, nor will it list
alternatives. You can therefore not conclude that it is safe to delete
a file if <code>dpkg -S</code> doesn't return any packages.</p>

<p>Note that it's a capitial <code>-S</code>, a lower case <code>-s</code>
returns status information for a package name.</p>

<a name="apt-file">
<h3>Other files</h3>

<p>In order to find packages that contain file patterns that you do not
have installed, you need to install apt-file:
<code>apt-get install apt-file</code>.</p>

<p>Like for <code>apt-get</code> you need to regularly synchronize
the apt-file database by running,</p>

<pre>
sudo apt-file update
</pre>

<p>Then, search for the filename using,</p>

<pre>
apt-file search <i>pattern</i>
</pre>

<p>will give you a list of packages containing <em>files</em> matching
<i>pattern</i>.</p>

<a name="apt-cache">
<h3>Some keyword</h3>

<p><code>apt-file search</code> is somewhat equivalent to</p>

<pre>
apt-cache search <i>regexp</i>
</pre>

<p>They use the same data from the repositories listed in your
sources.list file (although each uses it's own cache and needs to
be seperately synchronized with <code>apt-file update</code>
and <code>apt-get update</code> respectively.)</p>

<p>The big difference is this: <code>apt-file search</code> matches
against the <em>filenames</em> of packages, while <code>apt-cache search</code>
matches against <em>package name</em>, filenames and the <em>long description</em>
of packages. The second has an option to limit what is matched against though:
<code>apt-cache --names-only search</code> only matches against the
<i>package names</i>. Only <code>apt-file</code> has options to influence
how the pattern is interpreted: <code>--regexp</code> (<code>-x</code>)
treats the pattern as a regular expression, like <code>apt-cache</code>,
while <code>--ignore-case</code> (<code>-i</code>) does a case insensitive
search. Finally, <code>--fixed-string</code> (<code>-F</code>) interprets
the given string as the trailing fixed string of the filename (thus,
contrary what apt-file's man page says, the search pattern is still
expanded with generic characters at patternâ€™s start).</p>

<a name="queries">
<h2>Queries</h2>

<p>Now you have the package <i>name</i>, you can query the package database
about it.</p>

<h3>Contents</h3>

<p>To print a list of all installed files (again excluding extra files
as generated by maintainer script or alternatives), issue the command:</p>

<pre>
dpkg -L <i>name</i>
</pre>

<p>You can also use this command to find out if a package with that
exact name is installed at all.</p>

<p>Or, if you have a package file that isn't installed yet, you can list
it's contents with</p>

<pre>
dpkg --contents <i>package.deb</i>
</pre>

<h3>Version / Short description</h3>

<p>To print the version and a short description of
of an <em>installed</em> package, type</p>

<pre>
dpkg -l <i>name</i>
</pre>

<h3>Everything</h3>

<p>More information about an installed package can be obtained
with the status command:</p>

<pre>
dpkg -s <i>name</i>
</pre>

<p>Or, if the package isn't installed yet</p>

<pre>
dpkg --info <i>package.deb</i>
</pre>

<a name="customizing">
<h2>Customizing packages</h2>

<ul>
<li><a href="#get">Getting the source</a>
<li><a href="#build">Building from source</a>
<li><a href="#create">Creating a patch</a>
<li><a href="#add">Adding a patch to a debian package</a>
<li><a href="#dpkg-source">Creating a source package</a>
<li><a href="#repository">Setting up a repository</a>
<li><a href="#pinning">Pinning the packages of your local repository</a>
</ul>

<a name="get">
<h3>Getting the source</h3>

<p>To work with Debian source packages, do as root:</p>

<pre>
apt-get install build-essential fakeroot devscripts debhelper docbook-to-man
</pre>

<p>Often, a single source package generates multiple binary packages.
In order to find the name of the source that belongs to some package,
use <code>dpkg -s</code>. For example,</p>

<pre>
dpkg -s <i>name</i> | grep '^Source:' | sed -e 's/Source: //'
</pre>

<p>should print the source name of the package.</p>

<p>This name can then be used to download the sources with
the command:</p>

<pre>
apt-get source <i>name</i>
</pre>

<p>This command downloads the original
source tar-ball (<code>.orig.tar.gz</code>),
a file with some decriptive info (<code>.dsc</code>)
and a (compressed) diff (<code>.diff.gz</code>).
The tar-ball is unpacked and the diff is applied.</p>

<p>If for some reason you want to redo this later again,
you can use the commands:</p>

<pre>
dpkg-source -x name_VERSION.dsc

or, manually (I'll remove this once I know the above addition really works ;)

tar xzf name_VERSION.orig.tar.gz
mv name_VERSION.orig name_VERSION
cd name_VERSION
gzip -dc ../name_VERSION.diff.gz | patch -p1 -s
chmod +x debian/rules
</pre>

<a name="build">
<h3>Building from source</h3>

<p>In order to build a package, execute once as root:</p>

<pre>
apt-get build-dep name
</pre>

<p>This will install packages that are needed to build this package.</p>

<p>A source tree which supports debian has a debian directory
in the root of the source tree. This directory contains a script
called <code>rules</code>, which is actually a Makefile, but is
executed as a script.
There are several targets, including <code>configure</code>,
<code>build</code>, <code>install</code> and <code>clean</code>.
Normally you don't want to install the package onto your real
system of course!  Never run <code>debian/rules</code> as root
therefore, or bad things might happen.</p>

<p>While testing changes that you make to the code, you can (re)build
the package with the command:</p>

<pre>
debian/rules build
</pre>

<p>Of course, you can pass <code>-j &lt;n&gt;</code> to <code>debian/rules</code>,
which is actually a self-executing Makefile, to do parallel builds, or use <code>parallel=&lt;n&gt;</code> in <code>DEB_BUILD_OPTIONS</code>.</p>

<p>If you want to debug this code, you should first set the following environment variable:</p>

<pre>
export DEB_BUILD_OPTIONS="nostrip noopt"
</pre>

<p>Which is a space separated list of compile options.
This will prevent the binaries to be stripped and compile without optimization.</p>

<p>If you want to build a binary package, the package has to be
'installed'. The correct way to do this is by using the utility
<code>fakeroot</code>, which fakes an install, so that you can
build a binary package as non-root and without really installing
it. The following command should build a binary package:</p>

<code>
fakeroot debian/rules binary
</code>

<p>The <code>binary</code> target is yet another Makefile target
that will first execute a <code>configure</code>, <code>build</code>
and <code>install</code> if still necessary. If you already did build
the package, then only an <code>install</code> would first be done, etc.</p>

<p>This will have created a file <code>../somename_VERSION_ARCH.deb</code>,
where <code>ARCH</code> is for example <code>i386</code>.
More than one binary package can have been created.</p>

<a name="create">
<h3>Creating a patch</h3>

<p>If you want to change the source code, you will need to
make a diff of the changes that you made, otherwise it is not
possible to create a debian package. In order to create this
diff, you need to keep a copy of the original source tree,
with all debian patches already applied. Therefore, before
you make any changes, make a backup copy of the source tree
using the following commands:</p>

<pre>
cd $NAME-$VERSION
fakeroot debian/rules clean
dpatch apply-all
cp -pr ../$NAME-$VERSION ../$NAME-$VERSION-origdeb
</pre>

<p>Next, you can make changes and test the code by building it
with <code>debian/rules build</code>. Once you are satisfied,
create a new patch as follows:</p>

<pre>
cd ..
diff -rc $NAME-$VERSION-origdeb $NAME-$VERSION &gt; patchname.diff
</pre>

<p>Check if the diff looks sane (ie, doesn't contain unexpected
hunks)</p>

<a name="add">
<h3>Adding a patch to a debian package</h3>

<p>Add the patch to the source tree with (create the directory <code>debian/patches</code> if it does not already exist):</p>

<pre>
cd $NAME-$VERSION
dpatch patch-template -p "99_some_patch" "Description of patch" < ../patchname.diff > debian/patches/99_patchname.dpatch
chmod +x debian/patches/99_patchname.dpatch
</pre>

<p>Where the '99' should be chosen such that all your patches are applied
in the correct order and after the original debian patches.
Use <code>dpatch list-all</code> to obtain a list</p>

<p>Edit <code>debian/patches/99_patchname.dpatch</code> to fix your
name and email address.</p>

<p>Edit <code>debian/patches/00list</code> (create it if it does not already exist) and
add "99_patchname" to the list of patches.</p>

<p>Test if the patch applies with:</p>

<pre>
dpatch deapply-all
dpatch apply-all
</pre>

<p>Finally, add a changelog entry to <code>debian/changelog</code>.
This is crucial since it is the only way to change the version of
the package, reflecting that you made changes to it.</p>

<pre>
cd $NAME-$VERSION
dch -i
</pre>

<p>The format of the changelog entry is:</p>

<pre>
name (VERSION) unstable; urgency=low

  * Comments.
 
 -- Your Name &lt;your@email&gt; DATE
</pre>

<p><code>dch -i</code> makes an 'official' increment to the VERSION, but
that is probably not what you want. The VERSION that you use should be
larger than the current version. For example, if the current version
is 2.6.4-2, then you could change it into 2.6.4-2foo, or just add your
initials. Do not add a hypen or dot. If uncertain, you can check if
the version is considered larger with the command:<br>
<code>dpkg --compare-versions 2.6.4-2 lt 2.6.4-2foo &amp;&amp; echo OK</code>.</p>

<p>Now you can (re)build your debian package with
<code>fakeroot debian/rules binary</code>.</p>

<a name="dpkg-source">
<h3>Creating a source package</h3>

<p>Because you made changes, you now also might want to create a source
package (the original <code>.diff.gz</code> and <code>.dsc</code> files).</p>

<p>The command to do this is:</p>

<pre>
fakeroot debian/rules clean
cd ..
dpkg-source -b name-VERSION
</pre>

<a name="repository">
<h3>Setting up a repository</h3>

<p>In order to be able to continue to use <code>apt-get update</code> and
<code>apt-get upgrade</code> painlessly, you should set up your own local
repository with any packages that you made changes to.</p>

<p>For example, I made changes to the xchat package, and created a directory
<code>/usr/src/dists/xchat</code> in which I downloaded the sources, and
later created the <code>.deb</code> files. For example, an <code>ls</code>
inside the directory <code>/usr/src/dists/xchat</code> on my machine shows:</p>

<pre>
/usr/src/dists/xchat&gt;ls
overridefile  xchat_2.6.8-0.3.diff.gz     xchat_2.6.8-0.3run_i386.deb
Packages.gz   xchat_2.6.8-0.3.dsc         xchat_2.6.8.orig.tar.gz
Release       xchat_2.6.8-0.3run.diff.gz  xchat-common_2.6.8-0.3run_all.deb
xchat-2.6.8/  xchat_2.6.8-0.3run.dsc
</pre>

<p>We recognize the following files:</p>

<p>The files that were downloaded with the command <code>apt-get source xchat</code>:</p>
<ul>
<li><code>xchat_2.6.8.orig.tar.gz</code>: The original source tar-ball.
<li><code>xchat_2.6.8-0.3.diff.gz</code>: The original debian <code>.diff.gz</code>.
<li><code>xchat_2.6.8-0.3.dsc</code>: The original debian <code>.dsc</code>.
</ul>
<p>The files generated by <code>fakeroot debian/rules binary</code>:</p>
<ul>
<li><code>xchat_2.6.8-0.3run_i386.deb</code>
<li><code>xchat-common_2.6.8-0.3run_all.deb</code>
</ul>
<p>New source package files generated with <code>dpkg-source -b xchat-2.6.8</code>:</p>
<ul>
<li><code>xchat_2.6.8-0.3run.diff.gz</code>: The new debian <code>.diff.gz</code>.
<li><code>xchat_2.6.8-0.3run.dsc</code>: The new debian <code>.dsc</code>.
</ul>
<p>Finally, we see three files that are needed to turn this directory
into a local repository:</p>
<ul>
<li>overridefile
<li>Release
<li>Packages.gz
</ul>
<p>The contents of <code>overridefile</code> are:</p>

<pre>
xchat optional net Carlo Wood &lt;carlo@alinoe.com&gt;
xchat-common optional net Carlo Wood &lt;carlo@alinoe.com&gt;
</pre>

<p>Of course, replace "Carlo Wood &lt;carlo@alinoe.com&gt;" with
your own name and email address. This string will be used for
the 'Maintainer' of packages. The 'optional' and 'net' strings
are respectively the 'Priority:' and 'Section:' status fields
(<code>dpkg -s</code> or <code>dpkg -info</code>), for example
use
<pre>
dpkg --info xchat_2.6.8-0.3run_i386.deb | egrep '(Priority|Section):'
</pre>
to print the original values.</p>

<p>The <code>Packages.gz</code> file is generated from that
with the following command:<p>

<pre>
dpkg-scanpackages . overridefile | gzip &gt; Packages.gz
</pre>

<p>The <code>Release</code> file contains:</p>

<pre>
Origin: Run
Label: Local repository
Suite: testing
Architectures: i386
Components: contrib
Description: Customized packages by Carlo Wood
MD5Sum:
 f71c05625f8690c2f9cae621dfbe0116 900 ./Packages.gz
</pre>

<p>There are several things important here: The <i>Suite:</i> must
match whatever suite you are using (stable, testing, unstable).
The <i>Origin:</i> must be a unique string that we will use in
<code>/etc/apt/preferences</code> to pin this package to this repository:
that way you won't accidently "upgrade" the package, losing your changes.
The md5sum can be calculated with the command:</p>

<pre>
md5sum Packages.gz
</pre>

<p>The size (900 above) can be retrieved with <code>ls -l Packages.gz</code>.</p>

<p>Optionally, one can add more or other sums, using <code>sha1sum</code>
(with label <code>SHA1:</code>), and/or using <code>sha256sum</code>
(with label <code>SHA256:</code>). It is also possible to add an uncompressed
<code>Packages</code> file. For example,</p>

<pre>
MD5Sum:
 70c80c40007f69ce04b9697bbe0ed3bd 1818 ./Packages
 f71c05625f8690c2f9cae621dfbe0116  900 ./Packages.gz
SHA1:
 44e38fde666e6d2093b8ae523e8bba17fa19549c 1818 ./Packages
 003e795f97c21b35da573f20c86f325cceabf29a  900 ./Packages.gz
SHA256:
 b4fef40d5d901a0b310ffcc1a8930e2d994d5c87b71926365061e3d3399616ed 1818 ./Packages
 03825be1af8a4f1b552928b190aaae3408af6601c2fb178245e823f46ef50b71  900 ./Packages.gz
</pre>

<a name="debfile">
<p>Next, tell apt where the new repository is. Add like the
following to your /etc/apt/sources.list</code> file:</p>

<pre>
# Packages with local changes are listed here.
deb file:///usr/src/dists/xchat ./
</pre>

<p>where you have to replace the directory with the path that you used.</p>

<p>The final step needed is setting up the pinning, see the next
paragraph. After that, you can simply run <code>sudo apt-get update</code>
and <code>apt-get install xchat</code>, or whatever package you created.</p>

<a name="pinning">
<h3>Pinning the packages of your local repository</h3>

<p>In order to give priority to the packages in your local
repository, create a file <code>/etc/apt/preferences</code> with
the following content:</p>

<pre>
Package: *
Pin: release o=Run
Pin-Priority: 1000
</pre>

<p>where you have to replace the string "Run" with whatever you used
as <code>Origin:</code> in your Release file.</p>

<p><b>Important:</b> If you have a line in your <code>/etc/apt/apt.conf</code>
file like: <code>APT::Default-Release "testing";</code>, then <em>delete</em>
that line from <code>/etc/apt/apt.conf</code>! The effect of that line is
<em>exactly</em> the same as adding a pin with Pin-Priority of 990
for a release <b>a</b>rchive "testing" at the <em>top</em> of your
<code>/etc/apt/preferences</code> file, completely destroying the
functionality of how pinning works because you don't want that at the
top of your preferences file. The reason for that is this: Packages are
matched top down, and the first match found is used for a particular
repository (independent of the priority, and independent of any existing
version Pins (see below)) to set it's priority.
Thus, if you put a package with the name 'xchat' in your local repository,
and there is also a package with that name in the "testing" repository,
then the first match would be for the version in the "testing" repository,
setting the priority of your local repository to 990, regardless. If
you use:</p>
<pre>
Package: *
Pin: release a=testing
Pin-Priority: 990

Package: *
Pin: release o=Run
Pin-Priority: 1000
</pre>
<p>in your <code>/etc/apt/preferences</code> file, or the equivalent of
<code>APT::Default-Release "testing";</code> in your <code>/etc/apt/apt.conf</code> file,
then the output of <code>apt-cache policy xchat</code> would be:</p>
<pre>
xchat-common:
  Installed: (none)
  Candidate: 2.6.8-0.3run
  Version table:
     2.6.8-0.3run 0
        990 file: ./ Packages
     2.6.8-0.3 0
        990 http://ftp.nluug.nl testing/main Packages
        500 http://ftp.nluug.nl unstable/main Packages
</pre>
<p>where our local repository has a priority of 990 as you see.
See below for more explanations on how to interpret the output
of <code>apt-get policy</code>.</p>

<p>We want our local repository to overrule, therefore it needs to be at
the top instead:</p>

<pre>
Package: *
Pin: release o=Run
Pin-Priority: 1000

Package: *
Pin: release a=testing
Pin-Priority: 990
</pre>

<p>As above, replace "Run", and replace "testing" with whatever
<em>you</em> have installed as Suite!</p>

<a name="errata">
<h2>Pinning errata</h2>

<p>The documentation of pinning is a bit incomplete and unclear.
I had to debug the actual source code of apt in order to find out
how it <em>really</em> worked. Hopefully, this document will answer
questions of many others who are trying to do something with pinning.
I am assuming that you already read all other documentation on pinning
before you read this.</p>

<ul>
<li>There are three types of pinning: <code>Pin: release</code>, as used above,
<code>Pin: origin</code> and <code>Pin: version</code>.
The 'origin' here should be read as "site" and is matched against the site
name of the url in the sources.list file (ie, a line
<code>deb http://ftp.nluug.nl/pub/os/Linux/distr/debian/ testing main contrib non-free</code>
would match against the string "ftp.nluug.nl"). Lines in sources.list
that contain <code>file:</code> result in the empty string for this "site".
The documentation of apt says that you can match against this empty string
by using <code>Pin: origin ""</code> (note the double quotes), but this is
wrong -- that matches against the string "\"\"" and will therefore never
match anything.
<li>The <code>*</code> behind the <code>Package:</code> label is not a
wildcard. It is a special case that means "everything". Wildcards
are NOT supported.
<li>True wildcards in versions are also not supported.
The only thing that is supported is a trailing wildcard.
Thus, "2.6*" will match both "2.6" and "2.6.18", but "*run" will not match
anything, because there is no package with a version that contains the literal
character '*'. A star can only appear once, and only as the last character
in the version match pattern.
<li>The <code>Pin-Priority:</code> has a <em>different</em> meaning when
used together with <code>Package: *</code> and <code>Pin: release</code>
(or <code>origin</code>) than when used together with
<code>Pin: version</code> Pin: or with a named <code>Package:</code>.
In the first case, it actually sets the priority of
(the instance found in) that repository, while in the latter case it
ignores any repository package instances with a
priority less than the one specified.
One can list the priorities of the available repository package instances
as well as the requested minimum priority
with the command:
<pre>
apt-cache policy {packagename}
</pre>
A general output would be:
<pre>
package-name:
  Installed: &lt;installed-version&gt;
  Candidate: &lt;version-installed-when-doing-apt-get-upgrade&gt;
  Package-Pin: &lt;version-of-Pin-in-etc-apt-preferences&gt;
  Version table:
 *** &lt;some-version&gt; &lt;minimum-priority-to-consider&gt;
       &lt;priority-of-this-instance&gt; &lt;repository1&gt;
       &lt;priority-of-this-instance&gt; &lt;repository2&gt;
 *** &lt;some-other-version&gt; &lt;minimum-priority-to-consider&gt;
       &lt;priority-of-this-instance&gt; &lt;repository3&gt;
       &lt;priority-of-this-instance&gt; &lt;repository4&gt;
</pre>
For example, <code>apt-cache policy xchat-common</code> gives for me:
<pre>
xchat-common:
  Installed: 2.6.8-0.3run
  Candidate: 2.6.8-0.3run
  Version table:
 *** 2.6.8-0.3run 0
       1000 file: ./ Packages
        100 /var/lib/dpkg/status
     2.6.8-0.3 0
        990 http://ftp.nluug.nl testing/main Packages
        500 http://ftp.nluug.nl unstable/main Packages
</pre>
The <code>/var/lib/dpkg/status</code> stands for the installed package.
The highest priority is thus 1000 for the (local) <em>repository</em>
<code><b>./</b></code> (as we listed in the sources.list file,
see <a href="#debfile">above</a>).
<p>The repository package instance that will be used for upgrading
is now found as follows:
The largest value of the instance-priorities in the left column,
but AT LEAST with the Pin-Priority value of the first 'Pin: version'
that matches the package, or of an explicitely specified 'Package: name'
that matches (the <code>&lt;minimum-priority-to-consider&gt;</code>).
If there is no such priority (all values in the left column are less),
than you get the error that no such package is available.
The minimum priority to consider is listed after
<em>every</em> version in the version table,
not just after the version that actually matches, although it
would have made more sense to have given it it's own header,
for example 'Requested Priority: 0'.</p>
<p>For example, assume we add a "Pin: version" line to our
<code>/etc/apt/preferences</code> as follows:</p>
<pre>
Package: *
Pin: release o=Run
Pin-Priority: 1000

Package: *
Pin: release a=testing
Pin-Priority: 990

Package: xchat-common
Pin: version 2.6.8-0.3
Pin-Priority: 1100
</pre>
<p>Again, using "Package: xchat*" is not supported, it would not match anything.
Then the output of <code>apt-cache policy xchat-common</code>
becomes:</p>
<pre>
xchat-common:
  Installed: 2.6.8-0.3run
  Candidate: 2.6.8-0.3
  Package pin: 2.6.8-0.3
  Version table:
 *** 2.6.8-0.3run 1100
       1000 file: ./ Packages
        100 /var/lib/dpkg/status
     2.6.8-0.3 1100
        990 http://ftp.nluug.nl testing/main Packages
        500 http://ftp.nluug.nl unstable/main Packages
</pre>
<p>The exact meaning of this is as follows:
There is a package "xchat-common" installed, with version "2.6.8-0.3run".
There exists a "Pin: version" for the package "xchat-common"
that (first) matches "2.6.8-0.3". This version exists
(in both, testing/main and unstable/main of ftp.nluug.nl),
and therefore a "Package pin: 2.6.8-0.3" is printed.
The Pin-Priority of this Package Pin is 1100, the value of
which is printed regardless after every version in the Version table.
This 1100 is a request, but since there does not exist such
instance for this package, an upgrade will never happen.</p>

<p>Things are slightly different when no package of the given
name is installed yet. Lets remove xchat and xchat-common
with the command <code>sudo dpkg --purge xchat; sudo dpkg --purge xchat-common</code>,
after which the output of <code>apt-cache policy xchat-common</code> is:</p>
<pre>
xchat-common:
  Installed: (none)
  Candidate: 2.6.8-0.3
  Package pin: 2.6.8-0.3
  Version table:
     2.6.8-0.3run 1100
       1000 file: ./ Packages
     2.6.8-0.3 1100
        990 http://ftp.nluug.nl testing/main Packages
        500 http://ftp.nluug.nl unstable/main Packages
</pre>
<p>A command <code>apt-get install xchat-common</code> would
install the listed "Candidate:". This candidate version is
initialized with the found "Package pin:" version. Because
no repository has a priority higher than 1100, this version
is not changed. Finally, the version from testing/main
(priority 990) is actually installed, because that repository
has the higher priority.</p>
<p>However, if we change the Pin-Priority to something below
1000, for example,</p>
<pre>
Package: xchat-common
Pin: version 2.6.8-0.3
Pin-Priority: 999
</pre>
<p>then <code>apt-cache policy xchat-common</code> shows us:</p>
<pre>
xchat-common:
  Installed: (none)
  Candidate: 2.6.8-0.3run
  Package pin: 2.6.8-0.3
  Version table:
     2.6.8-0.3run 999
       1000 file: ./ Packages
     2.6.8-0.3 999
        990 http://ftp.nluug.nl testing/main Packages
        500 http://ftp.nluug.nl unstable/main Packages
</pre>
<p>The Candidate changed into "2.6.8-0.3run"!
The reason for that is, that now there exists a version (any) with
a priority *higher* than the found pin (1000 &gt; 999). So, you see
that a version pin does NOT set a priority; it kicks in when any
version exists anywhere that matches the version (only
allowing a trailing wildcard) initializing the version that is
going to be installed or upgraded, and then replacing that version
with any version anywhere that has a LARGER priority than the requested
version Pin-Priority, if any.</p>
<li>There is a significant difference between <code>Package: *</code>
and <code>Package: packagename</code>. In the latter case, the
specified <code>Pin-Priority</code> is always a request (the minimum
priority to consider).
This is unfortunate, as it makes the pinning less flexible.
For example, it is not possible to tell your system that you prefer
<code>testing</code> over <code>unstable</code> for one specific
package. I have a customized package <code>metacity</code>. When
I patched it, I got the source from CVS (although I created my own
.deb files), so the version was newer than anything else. Currently,
the version in unstable is newer. I have lines for both unstable and
testing in my /etc/apt/sources.list file because for some <em>other</em>
packages I am interested in using unstable. However, now I get:
<pre>
metacity:
  Installed: 1:2.17.8-svn-egg-run-13
  Candidate: 1:2.18.2-3
  Version table:
     1:2.18.2-3 0
        500 http://ftp.nluug.nl unstable/main Packages
 *** 1:2.17.8-svn-egg-run-13 0
        100 /var/lib/dpkg/status
     1:2.14.5-4 0
        990 http://ftp.nluug.nl testing/main Packages
</pre>
As you see, the version of testing is still a lot older than
my patch version (1:2.17.8-svn-egg-run-13), and therefore I see
no reason to upgrade it yet. However, the Candidate: is now
1:2.18.2-3 from unstable - and upgrading I would get the version
from unstable, which I certainly don't want.

<p>So, now one could think that the following works:
<pre>
Package: metacity
Pin: release a=unstable
Pin-Priority: -1
</pre>
thinking that this would cause unstable to never be used for the
package <code>metacity</code>. Unfortunately, this is <em>not</em>
the case. The result is:
<pre>
metacity:
  Installed: 1:2.17.8-svn-egg-run-13
  Candidate: 1:2.18.2-3
  Package pin: 1:2.18.2-3
  Version table:
     1:2.18.2-3 -1
        500 http://ftp.nluug.nl unstable/main Packages
 *** 1:2.17.8-svn-egg-run-13 -1
        100 /var/lib/dpkg/status
     1:2.14.5-4 -1
        990 http://ftp.nluug.nl testing/main Packages
</pre>
As you see, the <code>-1</code> appears as "request" pin level.
The effect is therefore that STILL version 1:2.18.2-3 from
<code>unstable</code> is the candidate, because 500 &gt; 100
is the highest priority available for which the version
 1:2.18.2-3 &gt; 1:2.17.8-svn-egg-run-13.
</ul>

<p>The final conclusion has to be that not only the official
documentation of <code>apt</code>, in regard to pinning, sucks&mdash;
but the whole design and algorithm that determines the
candidate version is borked. It is counter-intuitive, ambiguous
and not as flexible as it could be.</p>

<p>If this documentation helped you, then I'd appreciate it
if you dropped me a mail:
<a href="mailto:?To=carlo@alinoe.com&subject=Debian Pinning documentation">carlo@alinoe.com</a>.</p>

</div> <!-- content -->

<div id="footer">Copyright &copy; 2007 Carlo Wood</div>

</body>
</html>

