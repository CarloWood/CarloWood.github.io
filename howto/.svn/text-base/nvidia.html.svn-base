<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html LANG="en_US">
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta name="author" content="Carlo Wood">
<meta name="keywords" content="nvidia, nvidia drivers, debian, debian testing, etch, sid, backport, HOWTO">
<title>HOWTO build nvidia-kernel and nvidia-glx debian packages</title>
<link href="../css/common.css" rel="stylesheet" type="text/css">
<link href="howto.css" rel="stylesheet" type="text/css">
</head>

<body>

<h1>Building the nvidia-kernel debian package</h1>

<div id="date">Carlo Wood, December 2006 (last updated 19 Aug 2008)</div>

<h1>ATTENTION:</h1>

<p>The scripts don't work anymore.
On debian <b>testing</b> you are now advised to use this method:</p>

<pre>
update-pciids
apt-get install module-assistant nvidia-kernel-source
m-a prepare
m-a clean nvidia
m-a a-i nvidia
apt-get install nvidia-glx
depmod -a
modprobe nvidia
# This is only necessary if you start to use nvidia for the first time:
dpkg-reconfigure xserver-xorg
</pre>

<h1>OLD PAGE:</h1>

<ul>
<a href="#intro">Introduction</a><br>
<a href="#preps">Preparations</a><br>
<a href="#basic">Basic sid backporting</a><br>
<a href="#nvidia">Using the drivers from nvidia.com</a><br>
<a href="#download">Quick download</a>
</ul>

<div id="content">
<a name="intro"></a>
<h2>Introduction</h2>

<p>Nvidia is still the best video card to use for Dual-Head on GNU/Linux.
The reason for this is their support for linux with proprietary drivers, unlike
for example Matrox or ATI. Matrox made some video card drivers open source
in the past but at the moment of writing (December 2006) their support of
the Open Source community has hit rock bottom.
This is a huge problem for Dual-Head cards since no open source code to
properly initialize them is available: there is simply no support for
acceleration and Dual-Head on linux when using Matrox or (the newer) ATI cards.</p>

<p>There are several methods to obtain Dual-Head on linux:</p>

<ul>
<li>Nvidia's TwinView
<li>Xinerama (with, for example, xorg's drivers)
<li>Merged Frame Buffer
<li>Traditional dual head (two independent X displays)
</ul>

<p>However, only the first one can be taken seriously as the other
three have a serious lack of acceleration support.</p>

<p>Using Xinerama there is no DRI possible and in the case of Matrox
(I never really tried ATI, but I heard that is at least as badly supported)
there is no acceleration on the second head (no openGL and no video can be
used on it) and while playing a DVD might work on the first head, openGL
applications are extremely slow.</p>

<p>I read that Merged Frame Buffer supposedly supports acceleration,
but my experience is different. It is unusable nevertheless
because this method results in two monitors appearing as one screen:
the window manager has no notion of two monitors existing at all and
centralized applications appear on the edge of the two monitors.
Also (horizontally) maximized windows span both monitors making maximization unusable.</p>

<p>Using the traditional support of two monitors as two different
X displays is unusable too: it is impossible to move a window from one
monitor to another (you have to duplicate all panel buttons to have them
open an application on one or the other monitor) and when, for example,
firefox is already running on one display, trying to open an url
on the other fails because firefox detects that it is already running
but cannot connect to the running instance (due to a mismatch of the window id).
Moreover, also in this case you still don't have acceleration on the second head
when using a dual-head Matrox card. Now I don't say that this is impossible,
because Matrox still released a closed source plugin for X that should be
able to initialize the second head correctly (mga_hal) - but the developers
of xorg decided to remove the support for mga_hal from Xorg-7.x. They plan
to replace the functionality with open source code in the future (is my
understanding), or something. Sometimes open source developers are no
better than a black box: I have no feedback on why they did this, what are
their plans and if this is ever going to work again.</p>

<p>Finally, using the first option gives you the best of everything:
Full 'native' support of all acceleration on both heads, even for the
latest video cards; and full awareness of being Dual-Head (I had to
<a href="http://bugzilla.gnome.org/show_bug.cgi?id=356715">patch my window manager</a>
(metacity) to improve the actual dual-head support; but it is basically all there).</p>

<p>Unfortunately, there are also disadvantages to this method. For one thing,
the drivers are closed source: if something doesn't work you're basically
screwed. That is, there are a lot of wizard-level xorg.conf Options specific
to Nvidia's drivers to help to work around problems in most cases, but it
asks a great deal of persistence from your part (and a lot of reading online,
like you are doing now).</p>

<p>Another disadvantage of Nvidia's drivers is the fact that they need to
install shared graphics libraries, replacing the ones that are part of
your normal Operating System. While theoretically this shouldn't have to
be a problem, in practise it can lead to an unstable Operating System
with unmatching versions that cause instability (of the X Windowing System),
of openGL, or - in most cases - make it impossible to start X at all or
only on one monitor. Recovering from such broken systems means basically
a complete re-install of the Operating System; but you won't <em>know</em>
that it is broken; you will be thinking it is something else (configuration,
bugs in the drivers, X or both, an incompatible kernel version or even
suspect hardware problems).</p>

<p>The main reason for these dramatic problems is interference with the
native package manager of your distribution. In order to avoid such problem
on debian you should therefore <em>never</em> use Nvidia's installer, but
instead use the packages provided by debian. These install the same drivers,
but keep track of which libraries are replaced (in fact, they use a system
with symbolic links that are updated) and this method does not interfere
with normal upgrades (running apt-get).</p>

<p>Now you might ask yourself: then why the need for this HOWTO? Three reasons:</p>

<ol>
<li>The debian maintainers regulary REMOVE the nvidia kernel module package from debian 'testing'.
I was told this was because it was broken but I never saw any prove of that, and even so, why not just fix it?
<li>If you are using debian testing, and even if you are using debian unstable,
the version of the used nvidia drivers lags a bit with the latest driver
releases by nvidia. If for some reason you need the latest (beta) releases
from nvidia then you will also need this HOWTO to build your own debian
packages. Such reasons can be: a bug fix in the drivers needed for your
specific card, or-- you need to use the latest drivers for a yet unknown
problem with your setup in order to
<a href="http://www.nvnews.net/vbulletin/forumdisplay.php?f=14&order=desc">get support</a>
from Nvidia.
<li>If you are using a custom kernel, or an older kernel than is currently
in debian testing/unstable, then there won't be debian packages that support
your kernel (anymore).
</ol>

<a name="preps"></a>
<h2>Preparations</h2>

<p>In this HOWTO it is assumed that you are using debian testing, simply because
that is what I am using. If you are not then things might be different for you
here and there.</p>

<p>Before you start-- update your system completely by running the usual commands:<p>

<pre>
$ sudo apt-get update
$ sudo apt-get upgrade
</pre>

<p>If this leads to any packages being 'kept back', then either use
<code>apt-get dist-upgrade</code> or run <code>apt-get install kept-back-package</code>
afterwards, as usual.</p>

<p>In order to address the problem that <code>nvidia-kernel</code> is no longer
in debian testing (lenny), we will need to get packages and source code from
debian unstable
Therefore, edit your <code>/etc/apt/sources.list</code> and add
<code>deb</code> and <code>deb-src</code> lines for <code>unstable</code>.
You can achieve this by duplicating the lines that you have for <code>testing</code>
and then replace <code>testing</code> with <code>unstable</code>. Also, make sure
that you have <code>non-free</code> listed as section. The result should look
something like this:</p>

<pre>
deb http://your.favourite.mirror/pub/os/Linux/distr/debian/ testing main contrib non-free
deb http://your.favourite.mirror/pub/os/Linux/distr/debian/ unstable main contrib non-free
deb-src http://your.favourite.mirror/pub/os/Linux/distr/debian/ testing main contrib non-free
deb-src http://your.favourite.mirror/pub/os/Linux/distr/debian/ unstable main contrib non-free
</pre>

<p>Do <em>not</em> run <code>apt-get (dist-)upgrade</code> at this point, as it would
upgrade your whole system to <code>unstable</code>: you don't want that.
First, you have to tell your system to use <code>testing</code> by default.........
If you do NOT have a <code>/etc/apt/preferences</code> file then you could
achieve this by adding the following line to your <code>/etc/apt/apt.conf</code> file:</p>

<pre>
APT::Default-Release "testing";
</pre>

<p>But if you are using pinning, then you can't do that. Instead add a pin for testing
as is described <a href="debian.html#pinning">here</a>.
Note that I have written a <a href="debian.html#errata">Pinning Errata</a>
(corrections on existing, or missing documentation on Pinning) that should help
to understand pinning better (after reading other documentation).</p>

<p>Now run</p>

<pre>
$ sudo apt-get update
</pre>

<p>again to get the package lists of <code>unstable</code>.
Then you might run <code>sudo apt-get upgrade</code> to verify
that it will indeed not upgrade anything (but stick to testing) ;).
You can also test it by running <code>apt-cache policy libc6</code>
which should print something like:</p>

<pre>
libc6:
  Installed: 2.7-10
  Candidate: 2.7-10
  Version table:
     2.7-12 0
        500 http://ftp.nl.debian.org unstable/main Packages
 *** 2.7-10 0
        990 http://ftp.nl.debian.org testing/main Packages
        100 /var/lib/dpkg/status
</pre>

<p>Note the 990 priority for testing, while unstable is 500.</p>

<p>With that out of the way, we can start to do some real work.</p>

<a name="basic"></a>
<h2>Basic sid backporting</h2>

<p>The following method actually checks if nvidia-kernel was
added back to testing, in which case you didn't even have to
do the above. However, if the package still wasn't added
back then you will get the version from unstable. You can
also use this method to get unstable anyway: I explicitely tell
<code>apt-get</code> to use <code>unstable</code> below,
whenever that is required.</p>

<p>There are still packages in testing that we can use
regardless. Lets do that first (if you don't already have
them installed). Run the following command:</p>

<pre>
$ sudo apt-get install nvidia-kernel-common
</pre>

<p>This should succeed or something is wrong.</p>

<p>Next, we try what would happen if we'd try to
install/upgrade nvidia-glx at this point by running:</p>

<pre>
$ sudo apt-get install --dry-run nvidia-glx
</pre>

<p>If this prints that it would drag in a kernel image
from <code>unstable</code>, like this:</p>

<pre>
Inst linux-image-2.6.18-3-k7 (2.6.18-6 Debian:unstable)
</pre>

<p>note the strings <code>Inst linux-image</code> and
<code>Debian:unstable</code> then this means that not
all needed packages could be found in <code>testing</code>.
Another error you might see is:</p>

<pre>
nvidia-glx: Depends: nvidia-kernel-169.12 but it is not going to be installed
</pre>

<p>Both are most likely because <code>nvidia-kernel</code> is
still missing (this is the only package that is missing
at the time of writing this) and we need to build it ourselves.
The latter error happens when the nvidia-kernel in unstable
depends on versions (like the kernel) in unstable that are
simply not available in testing.</p>

<p>If <code>nvidia-kernel</code> is back in testing, then you
can just run the above command again without <code>--dry-run</code>
and you are done.</p>

<p>Otherwise, to build nvidia-kernel, download the automagic script
<a href="build-nvidia-kernel">build-nvidia-kernel</a> and run it.
You don't need to run it as root: it uses sudo for those commands
that need to be run as root (<code>apt-get</code> and <code>dpkg</code>.)</p>

<p>The script will populate the current directory with quite some files
(and directories), so you might want to put it in an empty directory
before running it (I have it in <code>/usr/src/nvidia</code>.)
You need write access to that directory.</p>

<p>The script is pretty intelligent and should catch most problems
either giving useful hints or fixing the problem. 
You must be running a 2.6 kernel version however.</p>

<pre>
$ ./build-nvidia-kernel
</pre>

<p>If all goes well then this will create the debian packages that
are needed in a directory named after the kernel version. If it fails,
then do what is described under <tt>Using the drivers from nvidia.com</tt> below.</p>

<p>In order to install it, run the script <a href="install-nvidia-debian"><code>./install-nvidia-debian</code></a>.</p>

<pre>
$ ./install-nvidia-debian --version=169.?? --kernel=`uname -r`
</pre>

<p>Where <code>169.??</code> (or <code>100.??.??</code> (or <code>1.0.????</code>) for older versions)
is the version of the nvidia drivers that you want to install
(the ones that you just compiled thus).
Note that <code>install-nvidia-debian</code> doesn't really install anything,
it just figures out which commands you should run as root and prints those
commands to standard out. However, if you are using a local repository as is
described
<a href="http://www.xs4all.nl/~carlo17/howto/debian.html#repository">here</a>,
then it automatically updates the repository (by updating the symbolic links
from the repository to the just created .deb files.</p>

<p>This might remove some mesa related packages. That is correct
as it will replace those.</p>

<p>If at any later time you upgraded your kernel version,
most likely stopping X from starting, than you just need
to rerun <code>./build-nvidia-kernel</code> and
<code>./install-nvidia-debian</code> and you should be
ready to go.</p>

<a name="nvidia"</a>
<h2>Using the drivers from nvidia.com</h2>

<p>If the version of the NVIDIA driver in debian unstable is not
new enough for you (or when you want older versions!), then read
the following that will describe how to replace the drivers with
drivers as released by Nvidia.</p>

<p>The lastest (beta) drivers from Nvidia can be downloaded
<a href="http://www.nvidia.com/Download/betadrivers.aspx?lang=en-us">here</a>
Older drivers can be downloaded from nvidia's ftp site:
<a href="ftp://download.nvidia.com/XFree86/Linux-x86/">Linux 32-bit</a> and
<a href="ftp://download.nvidia.com/XFree86/Linux-x86_64/">Linux 64-bit</a>.
In either case, if you have Linux 64-bit, you will ALSO need to download the
Linux 32-bit drivers because those will be needed to build nvidia-glx-ia32.</p>

<p>Download the (two) NVIDIA-Linux-x86*-*-pkg#.run file(s)
and put them in the same directory as the <code>build-nvidia-kernel</code>
script. Note that the package suffix ('-pkg#') is used to distinguish between packages
containing the same driver, but with different precompiled kernel interfaces. We
don't use precompiled kernel modules, so just download pkg0 (the smallest one).
Then run:</p>

<pre>
./build-nvidia-kernel --runfile=1.0-????
or
./build-nvidia-kernel --runfile=100.??.??
or
./build-nvidia-kernel --runfile=169.??
</pre>

<p>Replace <code>??</code> with the correct patch level, of course.</p>

<p>Warning: when using <code>--runfile</code>, the script builds the new
debian packages using the latest official version in the current directory
as template. It does this by simply replacing the version numbers.
This means that theoretically the resulting packages can be broken.
You should probably first look at the contents of the resulting
packages (with <code>dpkg --contents *.deb</code>) and compare that
with older (good) packages before installing them. Also, make sure
that you have the older packages ready to reinstall them, downgrading
to versions you know to work.
I tested it with release 1.0-7667 up till and including 1.0-9755,
100.14.03, 100.14.11, 100.14.19 and 169.12. Use at own risk.</p>

<p>Finally, make sure to <code>rmmod</code> and <code>modprobe</code>
the nvidia driver before starting X again! For example,</p>

<pre>
sudo rmmod nvidia
sudo modprobe nvidia  # Check if correct version is loaded
startx -- -logverbose 5
</pre>

<a name="download"></a>
<h2>Download</h2>

<p>The mentioned scripts. Read the above to learn when and how to use them.</p>

<table>
<tr>
<td><a href="build-nvidia-kernel"><code>build-nvidia-kernel</code></a></td><td>version 20080609.0</td><br>
</tr>
<tr>
<td><a href="install-nvidia-debian"><code>install-nvidia-debian</code></a>&nbsp;&nbsp;&nbsp;</td><td>version 20080206.0</td></p>
</tr>
</table>

</div> <!-- content -->

<div id="footer">Copyright &copy; 2006-2008 Carlo Wood</div>

</body>
</html>


