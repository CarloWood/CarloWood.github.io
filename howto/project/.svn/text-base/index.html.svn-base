<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html LANG="en_US">
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta name="author" content="Carlo Wood">
<meta name="keywords" content="project, new project, autoconf, automake, HOWTO, SVN, version control system">
<title>How to setup a new project</title>
<link href="../../css/common.css" rel="stylesheet" type="text/css">
<link href="../howto.css" rel="stylesheet" type="text/css">
</head>

<body>

<div id="content">

<h1>Setting up a new project</h1>

<div id="date">Carlo Wood, Jun/Jul 2007</div>

<h2>Introduction</h2>
<h3>About this document</h3>
<p>Despite the many automation tools, there are still a lot of things
&quot;the same&quot; for every project. Things that have to be done over and
over again. The initial goal of this document is to describe these
things, so that starting a new project is easier. At the same time
I'll try to turn this document into a reference, or at least overview,
so that beginners (and also more experienced developers) can use it
for that purpose.</p>

<h3>What is a project?</h3>
<p>In the light of this document, a project is a collection of
<b>files</b>&mdash; code, a build system and documentation&mdash;
that is released together as a tar-ball or package.</p>
<p>The main ingredients of a project are:</p>
<ol>
<li><a href="#intro_build_system">The build system</a>
<li><a href="#intro_documentation">Documentation</a>
<li><a href="#intro_code_files">Code files</a>
</ol>
<p>Each of these three categories can have files that are part of
the project but which are not released or part of the final &quot;package&quot;.</p>
<p>On top of that, there are many files which are generated automatically,
and that are therefore not part of the project in the sense that you have
to maintain them, but which <em>are</em> released as part of the package.</p>
<a name="intro_build_system">
<h3>What is a build system?</h3>
<p>The &quot;build system&quot; are those files that are intended for
the maintainer of the package. This includes those files that allow
you to <em>generate</em> other files.
A build system exists of four major parts:</p>
<ol>
<li><a href="#external_resources">External resources</a>
<li><a href="#the_version_control_system">The version control system</a>
<li><a href="#automake">The automake/autoconf System</a>
<li>Third party files that are part of the package.
</ol>
<a name="intro_documentation">
<h3>Documentation?</h3>
<p>This document is about open source. This means that your package needs
to be usable and even maintainable by arbitrary strangers.
The documentation is a <em>vital</em> part of your project. Without it
you will be the only one ever using it. Documentation can be roughly
devided into two groups of files:</p>
<ol>
<li>Documentation for (the) maintainer(s) of the package.
<li>Documentation for users (this might be developers using the package).
</ol>
<a name="intro_code_files">
<h3>What are code files?</h3>
<p>Files containing the code of the application. These are the most
interesting part to write from the viewpoint of the developer.
The reason for that is that it forms the heart of the project:
it causes the application to do what it is intended for. This
document will not go into much detail of the content of source
files as most of it will be different from project to project.
Also, programming falls outside the scope of this document.
Nevertheless, we can make a differentiation between several types
of source files:
<ol>
<li>Header files or Source files.
<li>Files that are or are not installed as part of installing the package.
<li>Files that are part of one compilation unit or multiple compilation units.
<li>Files that are part of one executable or library, or files that are
common between more than one.
</ol>
</p>

<h2>Project Layout</h2>

<p>Each project should have a single directory containing all files related to that project.
It is logical if the name of that directory and the name of the project are the same,
which puts a restriction on the name of a project. A good project name would exist of
only lower case characters, no underscores and certainly no spaces.</p>

<p>Furthermore, it is advisable to put all your projects of a given language in
on subdirectory as well. Lets call this root PROJECTS. For example,</p>

<div class="command">
<pre>
PROJECTS=&quot;$HOME/projects&quot;
</pre>
</div>

<p>Let use define the name of the current project as PROJECTNAME, for example,</p>

<div class="command">
<pre>
PROJECTNAME=cwchessboard
</pre>
</div>

<p>The directory $PROJECTS/$PROJECTNAME will <em>not</em> be under version control,
and therefore not contain source files. Instead it will contain external resources
(for example documentation related to the project) as well as at least two
directories:
<ol>
<li>A directory with files under revision control.</li>
<li>The build directory, with files that are generated as part of
the configuration and compilation step of the build system.</li>
</ol>

<p>The convention that I use is that the directory that is under revision control
has the same name as the project name, hence <code>$PROJECTS/$PROJECTNAME/$PROJECTNAME</code>,
and the object directory has <code>-objdir</code> appended to that, thus
<code>$PROJECTS/$PROJECTNAME/$PROJECTNAME-objdir</code>.</p>

<a name="external_resources">
<h3>External Resources</h3>

<p>Most &quot;external resource&quot; files are entirely circumstantial and too specific for
a particular project to say anything about. Let it suffice to give an example from practise therefore,</p>

<div class="command">
<pre>
$ ls $PROJECTS
cwautomacros/  cwchessboard/  cwdb/  edragon/  ircproxy/  libcw/  libcwd/  libcws/  libecc/
</pre>
</div>

<p>which shows the nine projects that I currently have. The &quot;external resource files&quot; are
kept in <code>$PROJECTS/$PROJECTNAME</code>. For example,<p>

<div class="command">
<pre>
$ ls $PROJECTS/cwchessboard
cwchessboard/         env.source                knight_fill_curve.path  knight_head.path    knight_mouth.path       knight_right_ear.path
cwchessboard-objdir/  knight_between_ears.path  knight_front.path       knight_jaw.path     knight_nose.path        knight_shadow.path
env.compiler          knight_eye.path           knight_hair.path        knight_mouth2.path  knight_outer_back.path
</pre>
</div>

<p>This shows that apart from the <code>env.source</code> and <code>env.compiler</code> project files
(see <a href="http://www.xs4all.nl/~carlo17/howto/cdeh.html">Directory dependent history and environment</a>),
the only external resources are <code>*.path</code> XML files:
<a href="http://www.inkscape.org/?lang=en">Inkscape</a> SVG vector graphics
describing different parts of the Knight chess piece.</p>

<p>Another example,</p>

<div class="command">
<pre>
$ ls $PROJECTS/libecc
a126671.txt  bspace_data   csin.nb       env.source  foo.nb   libecc-objdir/   partchk.cc  pink.cc  theory-docs/  Untitled-1.nb
a.out*       bspace_data2  env.compiler  eta.nb      libecc/  Mathematica.txt  pink*       Pink.nb  thirdparty/
</pre>
</div>

<p>This shows the external resources related to libecc. Also the subdirectories <code>theory-docs</code> and
<code>thirdparty</code> contain external resources (respectively mathematical documents and third party
cryptographic source code).</p>

<h3>The directory structure inside <code>$PROJECTS/$PROJECTNAME/$PROJECTNAME</code></h3>

<p>Also here try to organize the data by using a few subdirectories. For example, put all sources
in a subdirectory <code>src</code> and the documentation in a subdirectory <code>doc</code>.
If you are creating a library then put the headers in a separate directory, for example <code>src/include</code>.
Some people prefer to put also application- header files in a separate directory but I think it's easier to have
those in the same directory as the source files (<code>src</code>) on account of overview and opening files with an editor.

<h2>The build system</h2>

<p>The only two files that return in every project directory are <code>env.source</code> and <code>env.compiler</code>.
The meaning of these files are described in the HOWTO
&quot;<a href="http://www.xs4all.nl/~carlo17/howto/cdeh.html">Directory dependent history and environment</a>&quot;,
that also gives a specific example of what the content could be. Here I'll give the content that can
be used for a <em>new</em> project. Once the project evolves, it will be needed to update the content of
<code>env.source</code>, simply because some things are not known yet.
Other things that you might want in an <code>env.source</code> file are too project specific to be given here.</p>

<h3>source.env for applications</h3>

<p>This is block of text is <em>not</em> the content of the <code>env.source</code>
file; you have to copy and paste it to your command prompt. The reason for that
is so each environment variable ($PROJECTS, $PROJECTNAME) will be expanded, while
the backslash escape before other variables ($INSTALL_PREFIX etc) will be removed.</p>

<div class="command">
<pre>
### COPY&amp;PASTE EVERYTHING BELOW TO THE COMMAND PROMPT.
cat &gt; $PROJECTS/$PROJECTNAME/env.source &lt;&lt; EOF
export TOPPROJECT=$PROJECTS/$PROJECTNAME
source /env.source
source \$TOPPROJECT/env.compiler

# Flags.
CPPFLAGS=
LDFLAGS=
CFLAGS=
CXXFLAGS=

export CPPFLAGS LDFLAGS CFLAGS CXXFLAGS

# Helper variable.
GCCVER=\`\$CXX -v 2&gt;&amp;1 | grep '^gcc[ -][Vv]ersion' | sed -e 's/gcc[ -][Vv]ersion //' -e 's/ (.*//' -e 's/ /-/g'\`

# The install prefix.
INSTALL_PREFIX=&quot;/usr/local/install/\$GCCVER&quot;

# Set the correct paths.
pre_path &quot;\$INSTALL_PREFIX/lib/pkgconfig&quot; PKG_CONFIG_PATH
pre_path &quot;\$INSTALL_PREFIX/bin&quot; PATH
pre_path &quot;\$INSTALL_PREFIX/lib&quot; LD_LIBRARY_PATH

export PKG_CONFIG_PATH PATH LD_LIBRARY_PATH INSTALL_PREFIX

# Aliases.
alias s='ls $PROJECTS/$PROJECTNAME/$PROJECTNAME/*.cc $PROJECTS/$PROJECTNAME/$PROJECTNAME/*.h'
alias vi='vim -c &quot;set tags=$PROJECTS/$PROJECTNAME/$PROJECTNAME-objdir/tags&quot;'

# The default configure options.
export CONFIGURE_OPTIONS=&quot;--enable-maintainer-mode --enable-debug --prefix=\$INSTALL_PREFIX&quot;
alias configure='../$PROJECTNAME/configure \$CONFIGURE_OPTIONS'

# Doxygen output directory.
export OUTPUT_DIRECTORY=$HOME/www

# External source trees that need to be scanned with ctag.
export CTAGS_ROOT_SRCDIRS=&quot;/usr/src/gtk/glib-current /usr/src/gtk/gtk+-current&quot;
EOF
</pre>
</div>

<h3>source.env for libraries</h3>

<p>The <code>source.env</code> for libraries is the same as the above <code>source.env</code> for
applications, except that the first line that sets <code>TOPPROJECT</code> has to be removed.</p>

<h3>compiler.env</h3>

<p>The file <code>compiler.env</code> is the same for both, applications and libraries.</p>

<div class="command">
<pre>
### COPY&amp;PASTE EVERYTHING BELOW TO THE COMMAND PROMPT.
cat &gt; $PROJECTS/$PROJECTNAME/env.compiler &lt;&lt; EOF
CC=&quot;gcc&quot;
CXX=&quot;g++&quot;

# Use the correct cpp version.
CPP=&quot;\$(\$CC -print-libgcc-file-name | sed -e 's%/lib/.*%/bin/cpp%')
CXXCPP=&quot;\$CPP -x c++&quot;

export CC CXX CPP CXXCPP
EOF
</pre>
</div>

<a name="the_version_control_system">
<h3>The Version Control System</h3>

<p>The version control system would be <a href="http://en.wikipedia.org/wiki/Subversion_(software)">subversion</a>, or &quot;svn&quot; for short.
Most files inside <code>$PROJECTS/$PROJECTNAME/$PROJECTNAME</code> are under version control. Files outside that
directory are not. To create the initial <code>$PROJECTS/$PROJECTNAME/$PROJECTNAME</code> directory, first
create an empty project and import it into your SVN repository, then check out the trunk:</p>

<div class="command">
<pre>
cd &quot;$PROJECTS/$PROJECTNAME&quot;
mkdir tmp
cd tmp
mkdir branches tags trunk
svn import -m 'Initial directory structure' &quot;svn+ssh://$PROJECT/repos&quot;
cd ..
rm -rf tmp
svn checkout &quot;svn+ssh://$PROJECT/repos/trunk&quot; &quot;$PROJECT&quot;
</pre>
</div>

<p>The arguments containing <code>&quot;svn+ssh://$PROJECT/repos&quot;</code> are what you'd need
if you set up your repository as is described in the mini-HOWTO
<a href="http://www.xs4all.nl/~carlo17/svn/index.html">Setting up a jail rooted SVN repository</a>.
If you set up your own repository, than use whatever works for you.</p>

<p>How to use svn is outside the scope of this document. Let me suffice with listing
the most frequently used commands:</p>

<pre>
svn status		# List the status of all files in the current directory.
svn add somefile.cc	# Put somefile.cc under version control.
svn commit		# Synchronize repository with local copy.
svn update		# Synchronize local copy with repository (merging local changes).
svn revert somefile.cc	# Revert all local changes made to somefile.cc.
svn diff		# Show a diff of all local changes.
</pre>

<p>A complete overview of all svn subcommands can be found in
<a href="http://svnbook.red-bean.com/en/1.4/svn.ref.html">Chapter 9</a>
of the online <a href="http://svnbook.red-bean.com/">subversion book</a>.

<a name="automake">
<h3>The automake/autoconf System</h3>

<p>With this I mean every file (or symbolic link) that is used or generated by the
<a href="http://en.wikipedia.org/wiki/GNU_build_system">GNU build tools</a>.
The files that you, as maintainer, need to create are:</p>

<ul>
<li>configure.ac
<li>Makefile.am
</ul>

<p>Every (sub)directory containing source (or header) files needs a <code>Makefile.am</code>.</p>

<p>As a convention, the base directory/package should also contain the files, to be distributed:</p>

<ul>
<li>LICENSE
<li>INSTALL
<li>README
<li>NEWS
</ul>

<p>Both, LICENSE and README may be appended with a keyword that highlights
the specific contents of that file. For example,
<a href="LICENSE.AGPL">LICENSE.AGPL</a> (GPL v3),
<a href="LICENSE.QPL">LICENSE.QPL</a>,
<a href="LICENSE.WTFPL">LICENSE.WTFPL</a>,
<a href="README.SVN">README.SVN</a>, etc.
Many projects that are completely built with the GNU autotools
use a generic INSTALL file, that basically tells people to type
<code>configure</code>, followed by <code>make</code>. You should
have a copy of this file at <code>/usr/share/autoconf/INSTALL</code>.
The README file is highly project specific, but usually contains
things like what the project is about, how to contact the developer(s),
the goals of the project and things that user should know when they
want to use the project. Finally, the NEWS file is an incremental
that highlights the most important bug fixes and features of
each new release by version number. An initial NEWS file can
for example look like:</p>

<pre>
$PROJECTNAME-0.0.0

        First public release.
</pre>

<p>New entries (for new versions) are added at the <em>top</em> of the file.</p>

<h4>configure.ac</h4>

<p>The <code>configure</code> script is generated (by autoconf) from configure.ac
and aclocal.m4, where the latter (which is generated by <code>aclocal</code>)
contains all M4 macro definitions.
Those can be existing definitions (copied from your local installation of tools
like <code>autoconf</code>, <code>automake</code>, <code>libtool</code>, etc),
or they can be custom macro definitions. If you wrote your own macros for
this project, put each in a <code>macroname.m4</code> file in a <code>m4</code>
directory.</p>

Here is a is an initial <code>configure.ac</code>:

<pre>
</pre>

</div> <!-- content -->

<div id="footer">Copyright &copy; 2007 Carlo Wood</div>

</body>
</html>

