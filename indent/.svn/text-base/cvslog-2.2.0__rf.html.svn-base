<html>
<title>CVS</title>
<BODY BGCOLOR="#AAAAAA">
<hr><center><h1>--- /indent ---</h1></center><hr>







<A NAME="Makefile.am">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: Makefile.am</font></B><br></td><tr>
<tr><td><b>Revision 1.14</b><td>carlo
<td>1999/07/22 12:55:42<td>+1 -1
<TR><TD COLSPAN=4>
<code>More bug fixes by Kaveh R. Ghazi</code><br>

<tr><td><b>Revision 1.13</b><td>carlo
<td>1999/07/17 14:27:08<td>+2 -1
<TR><TD COLSPAN=4>
<code>Add new headers here too :/</code><br>

<tr><td><b>Revision 1.12</b><td>carlo
<td>1999/07/17 14:21:12<td>+2 -2
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>


</TABLE><br>
<A NAME="NEWS">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: NEWS</font></B><br></td><tr>
<tr><td><b>Revision 1.8</b><td>carlo
<td>1999/07/24 12:25:23<td>+2 -0
<TR><TD COLSPAN=4>
<code>Updated</code><br>

<tr><td><b>Revision 1.7</b><td>carlo
<td>1999/07/17 15:35:10<td>+3 -1
<TR><TD COLSPAN=4>
<code>Updated</code><br>

<tr><td><b>Revision 1.6</b><td>carlo
<td>1999/07/17 14:21:12<td>+10 -0
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>


</TABLE><br>




<A NAME="args.c">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: args.c</font></B><br></td><tr>
<tr><td><b>Revision 1.15</b><td>carlo
<td>1999/07/17 19:16:23<td>+18 -20
<TR><TD COLSPAN=4>
<code>Code formatting (run it through indent as well).</code><br>

<tr><td><b>Revision 1.14</b><td>carlo
<td>1999/07/17 18:56:55<td>+1 -1
<TR><TD COLSPAN=4>
<code>Put a semicolon after the RCS macros: indent doesn't like when the semicolon</code><br>
<code>is missing in the source file :/.</code><br>

<tr><td><b>Revision 1.13</b><td>carlo
<td>1999/07/17 14:21:12<td>+6 -19
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>


</TABLE><br>
<A NAME="args.h">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: args.h</font></B><br></td><tr>
<tr><td><b>Revision 1.3</b><td>carlo
<td>1999/07/17 19:16:23<td>+1 -1
<TR><TD COLSPAN=4>
<code>Code formatting (run it through indent as well).</code><br>

<tr><td><b>Revision 1.2</b><td>carlo
<td>1999/07/17 18:56:55<td>+1 -1
<TR><TD COLSPAN=4>
<code>Put a semicolon after the RCS macros: indent doesn't like when the semicolon</code><br>
<code>is missing in the source file :/.</code><br>

<tr><td><b>Revision 1.1</b><td>carlo
<td>1999/07/17 14:21:12<td>None
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>

</TABLE><br>
<A NAME="backup.c">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: backup.c</font></B><br></td><tr>
<tr><td><b>Revision 1.7</b><td>carlo
<td>1999/07/17 19:16:23<td>+7 -8
<TR><TD COLSPAN=4>
<code>Code formatting (run it through indent as well).</code><br>

<tr><td><b>Revision 1.6</b><td>carlo
<td>1999/07/17 18:56:55<td>+1 -1
<TR><TD COLSPAN=4>
<code>Put a semicolon after the RCS macros: indent doesn't like when the semicolon</code><br>
<code>is missing in the source file :/.</code><br>

<tr><td><b>Revision 1.5</b><td>carlo
<td>1999/07/17 14:21:12<td>+6 -14
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>


</TABLE><br>
<A NAME="backup.h">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: backup.h</font></B><br></td><tr>
<tr><td><b>Revision 1.5</b><td>carlo
<td>1999/07/17 19:16:23<td>+5 -7
<TR><TD COLSPAN=4>
<code>Code formatting (run it through indent as well).</code><br>

<tr><td><b>Revision 1.4</b><td>carlo
<td>1999/07/17 18:56:55<td>+1 -1
<TR><TD COLSPAN=4>
<code>Put a semicolon after the RCS macros: indent doesn't like when the semicolon</code><br>
<code>is missing in the source file :/.</code><br>

<tr><td><b>Revision 1.3</b><td>carlo
<td>1999/07/17 14:21:12<td>+12 -4
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>


</TABLE><br>
<A NAME="comments.c">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: comments.c</font></B><br></td><tr>
<tr><td><b>Revision 1.12</b><td>carlo
<td>1999/07/22 12:55:08<td>+1 -4
<TR><TD COLSPAN=4>
<code>Comments counting bug fix by Santiago Vila.</code><br>
<code>Removed unused variable out_coms.</code><br>

<tr><td><b>Revision 1.11</b><td>carlo
<td>1999/07/17 19:16:23<td>+58 -61
<TR><TD COLSPAN=4>
<code>Code formatting (run it through indent as well).</code><br>

<tr><td><b>Revision 1.10</b><td>carlo
<td>1999/07/17 18:56:55<td>+1 -1
<TR><TD COLSPAN=4>
<code>Put a semicolon after the RCS macros: indent doesn't like when the semicolon</code><br>
<code>is missing in the source file :/.</code><br>

<tr><td><b>Revision 1.9</b><td>carlo
<td>1999/07/17 14:21:12<td>+5 -1
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>


</TABLE><br>
<A NAME="comments.h">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: comments.h</font></B><br></td><tr>
<tr><td><b>Revision 1.3</b><td>carlo
<td>1999/07/17 19:16:23<td>+1 -1
<TR><TD COLSPAN=4>
<code>Code formatting (run it through indent as well).</code><br>

<tr><td><b>Revision 1.2</b><td>carlo
<td>1999/07/17 18:56:55<td>+1 -1
<TR><TD COLSPAN=4>
<code>Put a semicolon after the RCS macros: indent doesn't like when the semicolon</code><br>
<code>is missing in the source file :/.</code><br>

<tr><td><b>Revision 1.1</b><td>carlo
<td>1999/07/17 14:21:12<td>None
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>

</TABLE><br>
<A NAME="configure.in">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: configure.in</font></B><br></td><tr>
<tr><td><b>Revision 1.17</b><td>carlo
<td>1999/07/17 15:34:55<td>+1 -1
<TR><TD COLSPAN=4>
<code>Put the version back at 2.2.0</code><br>

<tr><td><b>Revision 1.16</b><td>carlo
<td>1999/07/17 14:21:12<td>+2 -2
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>

<tr><td><b>Revision 1.15</b><td>carlo
<td>1999/07/16 01:41:24<td>+1 -1
<TR><TD COLSPAN=4>
<code>Don't combine memmove and memcpy detection: SunOS 4.1.4 doesn't have</code><br>
<code>memmove, according to Nico Kadel-Garcia.</code><br>

<tr><td><b>Revision 1.14</b><td>carlo
<td>1999/07/16 01:38:22<td>+1 -1
<TR><TD COLSPAN=4>
<code>Bumped version number to 2.1.2</code><br>


</TABLE><br>
<A NAME="globs.c">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: globs.c</font></B><br></td><tr>
<tr><td><b>Revision 1.6</b><td>carlo
<td>1999/07/17 19:16:23<td>+1 -1
<TR><TD COLSPAN=4>
<code>Code formatting (run it through indent as well).</code><br>

<tr><td><b>Revision 1.5</b><td>carlo
<td>1999/07/17 18:56:55<td>+1 -1
<TR><TD COLSPAN=4>
<code>Put a semicolon after the RCS macros: indent doesn't like when the semicolon</code><br>
<code>is missing in the source file :/.</code><br>

<tr><td><b>Revision 1.4</b><td>carlo
<td>1999/07/17 14:21:12<td>+10 -9
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>


</TABLE><br>
<A NAME="globs.h">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: globs.h</font></B><br></td><tr>
<tr><td><b>Revision 1.3</b><td>carlo
<td>1999/07/17 19:16:23<td>+6 -4
<TR><TD COLSPAN=4>
<code>Code formatting (run it through indent as well).</code><br>

<tr><td><b>Revision 1.2</b><td>carlo
<td>1999/07/17 18:56:55<td>+1 -1
<TR><TD COLSPAN=4>
<code>Put a semicolon after the RCS macros: indent doesn't like when the semicolon</code><br>
<code>is missing in the source file :/.</code><br>

<tr><td><b>Revision 1.1</b><td>carlo
<td>1999/07/17 14:21:12<td>None
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>

</TABLE><br>



<A NAME="indent.c">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: indent.c</font></B><br></td><tr>
<tr><td><b>Revision 1.29</b><td>carlo
<td>1999/07/22 14:33:31<td>+7 -1
<TR><TD COLSPAN=4>
<code>Don't put a space after the &quot;gettext&quot; macro's '_' and 'N_', thanks to</code><br>
<code>Akim Demaille for reporting this.</code><br>

<tr><td><b>Revision 1.28</b><td>carlo
<td>1999/07/22 14:15:35<td>+10 -5
<TR><TD COLSPAN=4>
<code>Don't indent a broken line to the ind_dec column.</code><br>

<tr><td><b>Revision 1.27</b><td>carlo
<td>1999/07/22 12:55:08<td>+3 -3
<TR><TD COLSPAN=4>
<code>Comments counting bug fix by Santiago Vila.</code><br>
<code>Removed unused variable out_coms.</code><br>

<tr><td><b>Revision 1.26</b><td>carlo
<td>1999/07/17 19:16:23<td>+311 -420
<TR><TD COLSPAN=4>
<code>Code formatting (run it through indent as well).</code><br>

<tr><td><b>Revision 1.25</b><td>carlo
<td>1999/07/17 18:56:55<td>+1 -1
<TR><TD COLSPAN=4>
<code>Put a semicolon after the RCS macros: indent doesn't like when the semicolon</code><br>
<code>is missing in the source file :/.</code><br>

<tr><td><b>Revision 1.24</b><td>carlo
<td>1999/07/17 14:21:12<td>+13 -22
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>

<tr><td><b>Revision 1.23</b><td>carlo
<td>1999/07/17 01:47:29<td>+5 -1
<TR><TD COLSPAN=4>
<code>Detect the `const' qualifier more reliable.</code><br>
<code>Thanks to bug report by Lars Hecking.</code><br>


</TABLE><br>

<A NAME="indent.h">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: indent.h</font></B><br></td><tr>
<tr><td><b>Revision 1.17</b><td>carlo
<td>1999/07/22 12:55:08<td>+1 -2
<TR><TD COLSPAN=4>
<code>Comments counting bug fix by Santiago Vila.</code><br>
<code>Removed unused variable out_coms.</code><br>

<tr><td><b>Revision 1.16</b><td>carlo
<td>1999/07/17 19:16:23<td>+18 -18
<TR><TD COLSPAN=4>
<code>Code formatting (run it through indent as well).</code><br>

<tr><td><b>Revision 1.15</b><td>carlo
<td>1999/07/17 18:56:55<td>+1 -1
<TR><TD COLSPAN=4>
<code>Put a semicolon after the RCS macros: indent doesn't like when the semicolon</code><br>
<code>is missing in the source file :/.</code><br>

<tr><td><b>Revision 1.14</b><td>carlo
<td>1999/07/17 14:21:12<td>+12 -134
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>

<tr><td><b>Revision 1.13</b><td>carlo
<td>1999/07/17 01:47:29<td>+3 -1
<TR><TD COLSPAN=4>
<code>Detect the `const' qualifier more reliable.</code><br>
<code>Thanks to bug report by Lars Hecking.</code><br>


</TABLE><br>


<A NAME="indent.texinfo">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: indent.texinfo</font></B><br></td><tr>
<tr><td><b>Revision 1.13</b><td>carlo
<td>1999/07/22 12:55:08<td>+3 -0
<TR><TD COLSPAN=4>
<code>Comments counting bug fix by Santiago Vila.</code><br>
<code>Removed unused variable out_coms.</code><br>


</TABLE><br>


<A NAME="io.c">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: io.c</font></B><br></td><tr>
<tr><td><b>Revision 1.20</b><td>carlo
<td>1999/07/22 14:15:36<td>+2 -2
<TR><TD COLSPAN=4>
<code>Don't indent a broken line to the ind_dec column.</code><br>

<tr><td><b>Revision 1.19</b><td>carlo
<td>1999/07/22 12:55:42<td>+3 -3
<TR><TD COLSPAN=4>
<code>More bug fixes by Kaveh R. Ghazi</code><br>

<tr><td><b>Revision 1.18</b><td>carlo
<td>1999/07/17 19:16:23<td>+243 -241
<TR><TD COLSPAN=4>
<code>Code formatting (run it through indent as well).</code><br>

<tr><td><b>Revision 1.17</b><td>carlo
<td>1999/07/17 18:56:55<td>+1 -1
<TR><TD COLSPAN=4>
<code>Put a semicolon after the RCS macros: indent doesn't like when the semicolon</code><br>
<code>is missing in the source file :/.</code><br>

<tr><td><b>Revision 1.16</b><td>carlo
<td>1999/07/17 14:21:12<td>+23 -27
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>


</TABLE><br>
<A NAME="io.h">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: io.h</font></B><br></td><tr>
<tr><td><b>Revision 1.5</b><td>carlo
<td>1999/07/22 14:15:36<td>+2 -1
<TR><TD COLSPAN=4>
<code>Don't indent a broken line to the ind_dec column.</code><br>

<tr><td><b>Revision 1.4</b><td>carlo
<td>1999/07/22 12:55:42<td>+2 -2
<TR><TD COLSPAN=4>
<code>More bug fixes by Kaveh R. Ghazi</code><br>

<tr><td><b>Revision 1.3</b><td>carlo
<td>1999/07/17 19:16:23<td>+5 -5
<TR><TD COLSPAN=4>
<code>Code formatting (run it through indent as well).</code><br>

<tr><td><b>Revision 1.2</b><td>carlo
<td>1999/07/17 18:56:55<td>+1 -1
<TR><TD COLSPAN=4>
<code>Put a semicolon after the RCS macros: indent doesn't like when the semicolon</code><br>
<code>is missing in the source file :/.</code><br>

<tr><td><b>Revision 1.1</b><td>carlo
<td>1999/07/17 14:21:12<td>None
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>

</TABLE><br>
<A NAME="lexi.c">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: lexi.c</font></B><br></td><tr>
<tr><td><b>Revision 1.15</b><td>carlo
<td>1999/07/17 19:16:23<td>+132 -149
<TR><TD COLSPAN=4>
<code>Code formatting (run it through indent as well).</code><br>

<tr><td><b>Revision 1.14</b><td>carlo
<td>1999/07/17 18:56:55<td>+1 -1
<TR><TD COLSPAN=4>
<code>Put a semicolon after the RCS macros: indent doesn't like when the semicolon</code><br>
<code>is missing in the source file :/.</code><br>

<tr><td><b>Revision 1.13</b><td>carlo
<td>1999/07/17 14:21:12<td>+13 -7
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>


</TABLE><br>
<A NAME="lexi.h">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: lexi.h</font></B><br></td><tr>
<tr><td><b>Revision 1.3</b><td>carlo
<td>1999/07/17 19:16:23<td>+6 -6
<TR><TD COLSPAN=4>
<code>Code formatting (run it through indent as well).</code><br>

<tr><td><b>Revision 1.2</b><td>carlo
<td>1999/07/17 18:56:55<td>+1 -1
<TR><TD COLSPAN=4>
<code>Put a semicolon after the RCS macros: indent doesn't like when the semicolon</code><br>
<code>is missing in the source file :/.</code><br>

<tr><td><b>Revision 1.1</b><td>carlo
<td>1999/07/17 14:21:12<td>None
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>

</TABLE><br>




<A NAME="parse.c">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: parse.c</font></B><br></td><tr>
<tr><td><b>Revision 1.14</b><td>carlo
<td>1999/07/17 19:16:23<td>+41 -41
<TR><TD COLSPAN=4>
<code>Code formatting (run it through indent as well).</code><br>

<tr><td><b>Revision 1.13</b><td>carlo
<td>1999/07/17 18:56:55<td>+1 -1
<TR><TD COLSPAN=4>
<code>Put a semicolon after the RCS macros: indent doesn't like when the semicolon</code><br>
<code>is missing in the source file :/.</code><br>

<tr><td><b>Revision 1.12</b><td>carlo
<td>1999/07/17 14:21:12<td>+5 -3
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>

<tr><td><b>Revision 1.11</b><td>carlo
<td>1999/07/17 01:47:29<td>+1 -0
<TR><TD COLSPAN=4>
<code>Detect the `const' qualifier more reliable.</code><br>
<code>Thanks to bug report by Lars Hecking.</code><br>


</TABLE><br>
<A NAME="parse.h">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: parse.h</font></B><br></td><tr>
<tr><td><b>Revision 1.3</b><td>carlo
<td>1999/07/17 19:16:23<td>+1 -1
<TR><TD COLSPAN=4>
<code>Code formatting (run it through indent as well).</code><br>

<tr><td><b>Revision 1.2</b><td>carlo
<td>1999/07/17 18:56:55<td>+1 -1
<TR><TD COLSPAN=4>
<code>Put a semicolon after the RCS macros: indent doesn't like when the semicolon</code><br>
<code>is missing in the source file :/.</code><br>

<tr><td><b>Revision 1.1</b><td>carlo
<td>1999/07/17 14:21:12<td>None
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>

</TABLE><br>
<A NAME="sys.h">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: sys.h</font></B><br></td><tr>
<tr><td><b>Revision 1.10</b><td>carlo
<td>1999/07/17 19:16:23<td>+2 -3
<TR><TD COLSPAN=4>
<code>Code formatting (run it through indent as well).</code><br>

<tr><td><b>Revision 1.9</b><td>carlo
<td>1999/07/17 18:56:55<td>+3 -3
<TR><TD COLSPAN=4>
<code>Put a semicolon after the RCS macros: indent doesn't like when the semicolon</code><br>
<code>is missing in the source file :/.</code><br>

<tr><td><b>Revision 1.8</b><td>carlo
<td>1999/07/17 14:21:12<td>+12 -11
<TR><TD COLSPAN=4>
<code>Added prototypes.</code><br>
<code>De-ANSI-fied some inconsistent places.</code><br>
<code>Removed memcpy.c.</code><br>
<code>Should compile with a K&amp;R compiler again now.</code><br>
<code></code><br>
<code>Thanks to Kaveh R. Ghazi for report:</code><br>
<code></code><br>
<code>        The following are some patches I needed to get indent-2.1.1</code><br>
<code>working on SunOS4 using cc.  A couple of notes:</code><br>
<code></code><br>
<code>1.  You may wish to use the AM_C_PROTOTYPES macro from automake-1.4.</code><br>
<code>It'll define PROTOTYPES in config.h if they are available.  I had the</code><br>
<code>test in sys.h check for it assuming you would use it when I defined</code><br>
<code>the PARAMS macro to handle prototypes.</code><br>
<code></code><br>
<code>2.  The way memcpy is handled seems like overkill.  You do</code><br>
<code>AC_CHECK_FUNCS and define it to bcopy if not there.  You also call</code><br>
<code>AC_REPLACE_FUNCS.  You also hard code including memcpy.c in the</code><br>
<code>sources.  It seems to me that doing just the first check and defining</code><br>
<code>it in sys.h is enough.  Get rid of the REPLACE check and the file</code><br>
<code>memcpy.c file.</code><br>
<code></code><br>
<code>3.  If you insist on prototyping free() for some reason, at least</code><br>
<code>check whether the system already defines it for you.  I ran into</code><br>
<code>conflicts with SunOS defining it to &quot;extern int free()&quot; and your</code><br>
<code>source did &quot;extern void free()&quot; which bombed.  You can find various</code><br>
<code>ways of doing this, egcs-1.1.2 has a NEED_DECLARATIONS check which</code><br>
<code>works well.</code><br>
<code></code><br>
<code>4.  If you insist on using ANSI style function definitions, you should</code><br>
<code>do it everywhere and use automake's ansi2knr option for older systems.</code><br>
<code>Until then, I un-ANSI-fied the inconsistent places where it appeared.</code><br>

<tr><td><b>Revision 1.7</b><td>carlo
<td>1999/07/16 01:41:24<td>+3 -1
<TR><TD COLSPAN=4>
<code>Don't combine memmove and memcpy detection: SunOS 4.1.4 doesn't have</code><br>
<code>memmove, according to Nico Kadel-Garcia.</code><br>


</TABLE><br>
<A NAME="texinfo2man.c">
</a>
<TABLE BORDER=3 CELLSPACING=1 CELLPADDING=3 BGCOLOR="#c7c7c7" width="100%">
<TR ALIGN="left" VALIGN="top">
<TD COLSPAN=4 BGCOLOR="#7777FF"><b><FONT SIZE="+2">
Filename: texinfo2man.c</font></B><br></td><tr>
<tr><td><b>Revision 1.4</b><td>carlo
<td>1999/07/17 19:16:23<td>+581 -548
<TR><TD COLSPAN=4>
<code>Code formatting (run it through indent as well).</code><br>


</TABLE><br>

<hr width=100%>
<font size=2>
<p>File made using version 1.52 of <a href="http://www.sslug.dk/cvs2html" target="_top">cvs2html</a> by carlo at 99-07-24 14:37   and only showing data between revisions V2_1_1:HEAD.</font></p>
</body>
</html>
