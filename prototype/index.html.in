<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML LANG="en">
<HEAD>
	<META name="Author" content="Carlo Wood">
	<META http-equiv="content-type" content="text/html; charset=iso-8859-1">
	<TITLE>Prototype Makefiles</TITLE>
</HEAD>

<BODY BGCOLOR="#c8ccc8">
<CENTER>
<IMG SRC="../images/prototype.jpg"><BR CLEAR=ALL>
</CENTER>

<H2>Postscript Warning</H2>

<p>I do not use prototype anymore; it is therefore not anymore maintained.
If something breaks (ie, due to compiler changes) then feel free to tell
me and I'll fix it. For my own projects I now use a project generator,
which generates a full-blown cwautomacros/cdeh/automake/autoconf/libtool/doxygen/etc
project; this is still work IN PROGRESS, but you can see a preview 
<a href="../howto/project/">here</a>. The generator itself is not online yet,
mail me if you're interested.</p>

<H2>Introduction</H2>

<P>Prototype Makefiles allows <B>very fast</B> project start ups:
often no editing of Makefiles is needed at ALL.</P>

<P>Prototype Makefiles is a collection of shared Makefiles which are
installed globally, and Makefile templates that can be copied into
project directories using a simple script.&nbsp; The shared Makefiles
contain the rules for building a project, cleaning it and making
dependencies etc.&nbsp; The Makefile templates contain the data that
is specific for each project.&nbsp; This separation avoids duplication
of code in Makefiles and is therefore extremely easy to maintain
and extend.</P>

<H2>Quick start</H2>

<H4>Installation</H4>

<OL TYPE=1>

<LI><P>Download the tar ball below.</P></LI>

<LI><P>Unpack it with:</P>
<PRE>
    tar xzf prototype-@VERSION@.tar.gz
</PRE>
<P>This creates a subdirectory called <CODE>prototype-@VERSION@</CODE> in the current directory.</P></LI>

<LI><P><CODE>cd</CODE> into <CODE>prototype-@VERSION@</CODE>:</P>
<PRE>
    cd prototype-@VERSION@
</PRE></LI>

<LI><P>Pick a directory where you want to install the shared stuff:</P>
<PRE>
    ./configure --prefix=/usr --datadir=/usr/share
</PRE>
<P>See the INSTALL file for the meaning of the options.</P>

<TABLE WIDTH=500 BORDER=0 BGCOLOR="#eeeeee" CELLPADDING=4>
  <TR><TD BGCOLOR=#eeeeff><CENTER><B>New</B> (as of version 1.8)</CENTER><TD></TR>
  <TR><TD><P>If you are <EM>upgrading</EM> <CODE>prototype</CODE> and you have already installed an older version, then you can just type:</P>
  <PRE>
    ./configure
  </PRE>
  <P>and it will determine the <I>prefix</I> and <I>datadir</I> that you used before.</P></TD></TR>
</TABLE><BR></LI>

<LI><P>Install the package:</P>
<PRE>
    make install
</PRE>
<P>(Or <CODE>&nbsp;gmake install&nbsp;</CODE> if you are using FreeBSD)</P></LI>

<LI><P>The <EM>environment</EM> variable <CODE>PROTODIR</CODE> should point to the <I>prototype</I> installation directory (<CODE><I>$(datadir)</I>/prototype</CODE>, where <CODE><I>$(datadir)</I></CODE> is set with <CODE>--datadir</CODE> while running <CODE>./configure</CODE>, see the INSTALL file).</P>
<P>As an example, if you use <CODE>bash</CODE> as your shell, you could add to your <CODE>~/.profile</CODE> the following line,</P>
<PRE>
    export PROTODIR=/usr/share/prototype
</PRE></LI>

<LI><P>Edit <CODE>$PROTODIR/Makedefs.h</CODE> to set your own prefered default values for
<CODE>CFLAGS</CODE> and <CODE>CXXFLAGS</CODE>.&nbsp; Please note that this file is overwritten
the next time you upgrade (I'll fix that some day).</P></LI>

<LI><P>To test the successful installation (all of the above), run the command:</P>
<PRE>
    make test
</PRE></LI>
</OL>

<H4>Usage</H4>

<P>Now you are ready to use the <CODE>prototype</CODE> Makefiles.<P>

<OL TYPE=1>
<LI><P>Create a new project directory and change directory into it:</P>
<PRE>
    mkdir myProject
    cd myProject
</PRE></LI>

<LI><P>Generate the <EM>base</EM> (project) Makefile:</P>
<PRE>
    makeproto
</PRE>
<P>Note that you can not put sources in this directory, it wouldn't belong to anything.<BR>
Instead create a `main', `lib' or `sub' directory. For instance:</P></LI>
<LI><P>Create a directory and Makefile for the (or a) main executable:</P>
<PRE>
    mkdir aProgram
    cd aProgram
    makeproto main
</PRE>
</P></LI>

<LI><P>Write code and just type <CODE>make</CODE> when you want to compile it!</P>
</OL>

<P>Please, also read the README file that comes with the package.</P>

<H3>Example</H3>

<P>Below is given a Real Life (tm) project Makefile for a large and complex
shared library which is divided up over several sub directories
(the Makefiles in each of these subdirectories are not given, but look
similar - with only data specific for that directory).
This file is everything that needs maintenance for this sub directory.
Everything that was added manually is made <B>bold</B>, the rest was
generated by typing `<CODE>makeproto lib</CODE>':</P>

<PRE>
  # Directory where the base Makefile resides:
  BASEDIR=../..

  # Library name, for example: "LIB=foo" -> libfoo.so and libfoo.a
  # The version of the library is read from .$(LIB).version (which is
  # automatically incremented 1 Minor Version every time you (re)install.
  LIB=<B>cw</B>

  # List of subdirectories:
  SUBDIRS:=$(shell list=`/bin/ls -1 -t | egrep -v '^(CVS<B>|include</B>)$$'`; for i in $$list; do if test -d $$i; then echo $$i; fi; done)

  # List of source files:
  CXXSRC:=$(shell /bin/ls -1 -t -F *$(CPPEXT) 2>/dev/null | grep '\$(CPPEXT)$$')

  # Library specific include flags, for example: -I$(BASEDIR)/include or -I.
  INCLUDEFLAGS=

  # Extra static libraries to link with:
  STATICLIBS=

  # Extra shared libraries to link with:
  SHAREDLIBS=<B>-lcwd</B>

  # Put here extra -L... flags
  LIBFLAGS=

  #-----------------------------------------------------------------------------

  include $(PROTODIR)/lib/PTMakefile

  #clean::
  #depend::
  #build::

  <B>version.cc: Makefile .cw.version
	  echo "char const* libcw_version = \"$(VERSION)\";" > version.cc

  real-clean::
	  $(RM) -f version.cc

  include .cw.version

  CW_MAJOR:=$(VERSION_MAJOR)
  CW_MINOR:=$(VERSION_MINOR)
  CW_PATCH:=$(VERSION_PATCH)
  CW_VERSION:=$(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_PATCH)

  install:
	  @( if [ -f $(BASEDIR)/lib/libcw.so.$(CW_VERSION) ]; then \
	    make .cw.install.timestamp; \
	  else \
	    echo "libcw.so.$(CW_VERSION) wasn't compiled yet"; \
	  fi )

  .cw.install.timestamp: $(BASEDIR)/lib/libcw.so.$(CW_VERSION)
	  $(INSTALL) -g $(INSTALL_GROUP) -m 755 -o $(INSTALL_OWNER) $(BASEDIR)/lib/libcw.so.$(CW_VERSION) $(LIB_DIR)
	  touch .cw.install.timestamp
	  /sbin/ldconfig
	  ln -sf $(LIB_DIR)/libcw.so.$(CW_MAJOR) $(LIB_DIR)/libcw.so
	  $(INSTALL) -d $(PREFIX)/include/libcw
	  $(INSTALL) -g $(INSTALL_GROUP) -m 644 -o $(INSTALL_OWNER) include/libcw/*.h $(PREFIX)/include/libcw
	  @echo "VERSION_MAJOR=$(CW_MAJOR)" > .cw.version
	  @echo "VERSION_MINOR=$(CW_MINOR)" >> .cw.version
	@echo "$(CW_PATCH)" | awk -- '{ printf ("VERSION_PATCH=%d\n", $$0 + 1) }' >> .cw.version</B>
</PRE>

@CHANGELOG@

<H2>Downloading</H2>

<LI><A HREF="prototype-@VERSION@.tar.gz">prototype-@VERSION@.tar.gz</A>

</BODY>
</HTML>
